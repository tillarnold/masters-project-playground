// -----------------------------
// methods
// -----------------------------
method m_apply_id_rec_CALLER_0_24(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Vector(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Lt_i32_i32(_0_2s_0, s_Int_i32_cons(1000)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Eq_i32_i32(_0_4s_1, s_Int_i32_cons(2000))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Ge_i32_i32(_0_2s_0, s_Int_i32_cons(0)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Ge_i32_i32(_0_4s_1, s_Int_i32_cons(1))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_5s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Lt_i32_i32(_0_2s_0, _0_5s_1)))))
  ensures p_Vector(_0p)
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_Vector_read_0(_0_3s_0))) in
(let _0_7s_1 == (s_Ref_Not_cons(s_Vector_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_7s_1))) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_7s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_6s_1 == (s_3_Tuple_cons(_0_7s_1, _0_1s_0, _0_3s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_i32_i32(qvar_0_0, s_Int_i32_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_0(_0_6s_1))) in
  (let _1_5s_1 == (mir_binop_Gt_i32_i32(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Vector_read_0(s_3_Tuple_read_1(_0_6s_1))) in
    (let _1_8s_1 == (mir_binop_Lt_i32_i32(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? s_Bool_cons(true)
    : (let _1_13s_1 == (s_3_Tuple_read_2(_0_6s_1)) in
      (let _1_12s_1 == (f_get(_1_13s_1, qvar_0_0)) in
      (let _1_11s_1 == (s_Ref_Not_cons(_1_12s_1)) in
      (let _1_18s_1 == (s_3_Tuple_read_1(_0_6s_1)) in
      (let _1_17s_1 == (f_get(_1_18s_1, qvar_0_0)) in
      (let _1_16s_1 == (s_Ref_Not_cons(_1_17s_1)) in
      (let _1_15s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_1_16s_1))) in
      s_Bool_cons((_1_11s_1) == (_1_15s_1)))))))))))))))))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_7s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_6s_1 == (s_3_Tuple_cons(_0_7s_1, _0_1s_0, _0_3s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_i32_i32(qvar_0_0, s_Int_i32_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_0(_0_6s_1))) in
  (let _1_5s_1 == (mir_binop_Le_i32_i32(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Vector_read_0(s_3_Tuple_read_1(_0_6s_1))) in
    (let _1_8s_1 == (mir_binop_Lt_i32_i32(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? s_Bool_cons(true)
    : (let _1_13s_1 == (s_3_Tuple_read_2(_0_6s_1)) in
      (let _1_12s_1 == (f_get(_1_13s_1, qvar_0_0)) in
      (let _1_11s_1 == (s_Ref_Not_cons(_1_12s_1)) in
      (let _1_18s_1 == (s_3_Tuple_read_1(_0_6s_1)) in
      (let _1_17s_1 == (f_get(_1_18s_1, qvar_0_0)) in
      (let _1_16s_1 == (s_Ref_Not_cons(_1_17s_1)) in
      (let _1_15s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_1_16s_1))) in
      s_Bool_cons((_1_11s_1) == (_1_15s_1)))))))))))))))))))))))

method m_apply_id_rec_CALLER_(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Vector(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Lt_i32_i32(_0_2s_0, s_Int_i32_cons(1000)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Eq_i32_i32(_0_4s_1, s_Int_i32_cons(2000))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Ge_i32_i32(_0_2s_0, s_Int_i32_cons(0)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Ge_i32_i32(_0_4s_1, s_Int_i32_cons(1))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_5s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Lt_i32_i32(_0_2s_0, _0_5s_1)))))
  ensures p_Vector(_0p)
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_Vector_read_0(_0_3s_0))) in
(let _0_7s_1 == (s_Ref_Not_cons(s_Vector_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_7s_1))) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_7s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_6s_1 == (s_3_Tuple_cons(_0_7s_1, _0_1s_0, _0_3s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_i32_i32(qvar_0_0, s_Int_i32_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_0(_0_6s_1))) in
  (let _1_5s_1 == (mir_binop_Gt_i32_i32(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Vector_read_0(s_3_Tuple_read_1(_0_6s_1))) in
    (let _1_8s_1 == (mir_binop_Lt_i32_i32(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? s_Bool_cons(true)
    : (let _1_13s_1 == (s_3_Tuple_read_2(_0_6s_1)) in
      (let _1_12s_1 == (f_get(_1_13s_1, qvar_0_0)) in
      (let _1_11s_1 == (s_Ref_Not_cons(_1_12s_1)) in
      (let _1_18s_1 == (s_3_Tuple_read_1(_0_6s_1)) in
      (let _1_17s_1 == (f_get(_1_18s_1, qvar_0_0)) in
      (let _1_16s_1 == (s_Ref_Not_cons(_1_17s_1)) in
      (let _1_15s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_1_16s_1))) in
      s_Bool_cons((_1_11s_1) == (_1_15s_1)))))))))))))))))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Vector_snap(_0p)) in
(let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_7s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_6s_1 == (s_3_Tuple_cons(_0_7s_1, _0_1s_0, _0_3s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_i32_i32(qvar_0_0, s_Int_i32_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_0(_0_6s_1))) in
  (let _1_5s_1 == (mir_binop_Le_i32_i32(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Vector_read_0(s_3_Tuple_read_1(_0_6s_1))) in
    (let _1_8s_1 == (mir_binop_Lt_i32_i32(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? s_Bool_cons(true)
    : (let _1_13s_1 == (s_3_Tuple_read_2(_0_6s_1)) in
      (let _1_12s_1 == (f_get(_1_13s_1, qvar_0_0)) in
      (let _1_11s_1 == (s_Ref_Not_cons(_1_12s_1)) in
      (let _1_18s_1 == (s_3_Tuple_read_1(_0_6s_1)) in
      (let _1_17s_1 == (f_get(_1_18s_1, qvar_0_0)) in
      (let _1_16s_1 == (s_Ref_Not_cons(_1_17s_1)) in
      (let _1_15s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_1_16s_1))) in
      s_Bool_cons((_1_11s_1) == (_1_15s_1)))))))))))))))))))))))
{
label start
  var _3p: Ref
  var _4p: Ref
  var _5p: Ref
  var _6p: Ref
  var _7p: Ref
  var _8p: Ref
  var _9p: Ref
  var _10p: Ref
  goto bb_0
label bb_0
  // _5 = _2
  assign_p_Int_i32(_5p, p_Int_i32_snap(_2p))
  // _6 = CheckedAdd(_5, const 1_i32)
  assign_p_2_Tuple_$_Int_i32_$_Bool(_6p, mir_checkedbinop_Add_i32_i32(p_Int_i32_snap(_5p), s_Int_i32_cons(1)))
  // assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_i32) -> [success: bb1, unwind: bb7]
  unfold p_2_Tuple_$_Int_i32_$_Bool(_6p)
  var _tmp0: s_Bool
  _tmp0 := p_Bool_snap(p_2_Tuple_$_Int_i32_$_Bool_field_1(_6p))
  exhale p_Bool(p_2_Tuple_$_Int_i32_$_Bool_field_1(_6p))
  exhale (s_Bool_read_0(_tmp0)) == (false)
  if (s_Bool_read_0(_tmp0) == false) { goto bb_1 }
  else { goto bb_7 }
label bb_1
  // _4 = move (_6.0: i32)
  var _tmp1: s_Int_i32
  _tmp1 := p_Int_i32_snap(p_2_Tuple_$_Int_i32_$_Bool_field_0(_6p))
  exhale p_Int_i32(p_2_Tuple_$_Int_i32_$_Bool_field_0(_6p))
  assign_p_Int_i32(_4p, _tmp1)
  // _3 = Lt(move _4, const 10_i32)
  var _tmp2: s_Int_i32
  _tmp2 := p_Int_i32_snap(_4p)
  exhale p_Int_i32(_4p)
  assign_p_Bool(_3p, mir_binop_Lt_i32_i32(_tmp2, s_Int_i32_cons(10)))
  // switchInt(move _3) -> [0: bb5, otherwise: bb2]
  var _tmp3: s_Bool
  _tmp3 := p_Bool_snap(_3p)
  exhale p_Bool(_3p)
  if (s_Bool_read_0(_tmp3) == false) { goto bb_5 }
  else { goto bb_2 }
label bb_2
  // _7 = move _1
  var _tmp4: s_Vector
  _tmp4 := p_Vector_snap(_1p)
  exhale p_Vector(_1p)
  assign_p_Vector(_7p, _tmp4)
  // _9 = _2
  assign_p_Int_i32(_9p, p_Int_i32_snap(_2p))
  // _10 = CheckedAdd(_9, const 1_i32)
  assign_p_2_Tuple_$_Int_i32_$_Bool(_10p, mir_checkedbinop_Add_i32_i32(p_Int_i32_snap(_9p), s_Int_i32_cons(1)))
  // assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_i32) -> [success: bb3, unwind: bb7]
  unfold p_2_Tuple_$_Int_i32_$_Bool(_10p)
  var _tmp5: s_Bool
  _tmp5 := p_Bool_snap(p_2_Tuple_$_Int_i32_$_Bool_field_1(_10p))
  exhale p_Bool(p_2_Tuple_$_Int_i32_$_Bool_field_1(_10p))
  exhale (s_Bool_read_0(_tmp5)) == (false)
  if (s_Bool_read_0(_tmp5) == false) { goto bb_3 }
  else { goto bb_7 }
label bb_3
  // _8 = move (_10.0: i32)
  var _tmp6: s_Int_i32
  _tmp6 := p_Int_i32_snap(p_2_Tuple_$_Int_i32_$_Bool_field_0(_10p))
  exhale p_Int_i32(p_2_Tuple_$_Int_i32_$_Bool_field_0(_10p))
  assign_p_Int_i32(_8p, _tmp6)
  // _0 = apply_id_rec(move _7, move _8) -> [return: bb4, unwind: bb7]
  m_apply_id_rec_CALLER_0_24(_0p, _7p, _8p)
  goto bb_4
label bb_4
  // goto -> bb6
  goto bb_6
label bb_5
  // _0 = move _1
  var _tmp7: s_Vector
  _tmp7 := p_Vector_snap(_1p)
  exhale p_Vector(_1p)
  assign_p_Vector(_0p, _tmp7)
  // goto -> bb6
  goto bb_6
label bb_6
  // return
  exhale p_Int_i32(_2p)
  goto end
label bb_7
  // resume
  assert false // terminator resume
label end
  // return
}

method m_main_CALLER_(
  _0p: Ref
)
  ensures p_0_Tuple(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  goto end
label end
  // return
}

// -----------------------------
// functions
// -----------------------------
function f_get(
  _1p: s_Vector,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_read_0(mir_binop_Ge_i32_i32(_2p, s_Int_i32_cons(0)))
  requires s_Bool_read_0((let _0_5s_1 == (s_Vector_read_0(_1p)) in
mir_binop_Lt_i32_i32(_2p, _0_5s_1)))
  requires s_Bool_read_0((let _0_4s_1 == (s_Vector_read_0(_1p)) in
mir_binop_Ge_i32_i32(_0_4s_1, s_Int_i32_cons(0))))

// -----------------------------
// MIR builtins
// -----------------------------
function mir_checkedbinop_Add_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_2_Tuple[s_Int_i32, s_Bool]
{
  (let val == ((s_Int_i32_read_0(arg1)) + (s_Int_i32_read_0(arg2))) in
(let wrapped_val == ((((val) + (2147483648)) % (4294967296)) - (2147483648)) in
s_2_Tuple_cons(s_Int_i32_cons(wrapped_val), s_Bool_cons((wrapped_val) != (val)))))
}

function mir_binop_Lt_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) < (s_Int_i32_read_0(arg2)))
}

function mir_binop_Eq_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) == (s_Int_i32_read_0(arg2)))
}

function mir_binop_Ge_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) >= (s_Int_i32_read_0(arg2)))
}

function mir_binop_Gt_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) > (s_Int_i32_read_0(arg2)))
}

function mir_binop_Le_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) <= (s_Int_i32_read_0(arg2)))
}

// -----------------------------
// generics
// -----------------------------
// -----------------------------
// snapshots
// -----------------------------
domain s_Int_i32 {
  axiom ax_s_Int_i32_cons_read_0 {
    forall f0: Int :: {s_Int_i32_cons(f0)} (s_Int_i32_read_0(s_Int_i32_cons(f0))) == (f0)
  }
  axiom ax_s_Int_i32_cons {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} (s_Int_i32_cons(s_Int_i32_read_0(self))) == (self)
  }
  axiom ax_s_Int_i32_write_0_read_0 {
    forall self: s_Int_i32, val: Int :: {s_Int_i32_read_0(s_Int_i32_write_0(self, val))} (s_Int_i32_read_0(s_Int_i32_write_0(self, val))) == (val)
  }
  axiom s_Int_i32_bounds {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} ((-(2147483648)) <= (s_Int_i32_read_0(self))) && ((s_Int_i32_read_0(self)) <= (2147483647))
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_read_0(s_Int_i32): Int
  function s_Int_i32_write_0(s_Int_i32, Int): s_Int_i32
}

domain s_Vector {
  axiom ax_s_Vector_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Vector_cons(f0, f1)} (s_Vector_read_0(s_Vector_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Vector_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Vector_cons(f0, f1)} (s_Vector_read_1(s_Vector_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Vector_cons {
    forall self: s_Vector :: {s_Vector_cons(s_Vector_read_0(self), s_Vector_read_1(self))} (s_Vector_cons(s_Vector_read_0(self), s_Vector_read_1(self))) == (self)
  }
  axiom ax_s_Vector_write_0_read_0 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_0(s_Vector_write_0(self, val))} (s_Vector_read_0(s_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Vector_write_0_read_1 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_1(s_Vector_write_0(self, val))} (s_Vector_read_1(s_Vector_write_0(self, val))) == (s_Vector_read_1(self))
  }
  axiom ax_s_Vector_write_1_read_0 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_0(s_Vector_write_1(self, val))} (s_Vector_read_0(s_Vector_write_1(self, val))) == (s_Vector_read_0(self))
  }
  axiom ax_s_Vector_write_1_read_1 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_1(s_Vector_write_1(self, val))} (s_Vector_read_1(s_Vector_write_1(self, val))) == (val)
  }
  function s_Vector_cons(s_Int_i32, s_Int_i32): s_Vector
  function s_Vector_read_0(s_Vector): s_Int_i32
  function s_Vector_write_0(s_Vector, s_Int_i32): s_Vector
  function s_Vector_read_1(s_Vector): s_Int_i32
  function s_Vector_write_1(s_Vector, s_Int_i32): s_Vector
}

domain s_Bool {
  axiom ax_s_Bool_cons_read_0 {
    forall f0: Bool :: {s_Bool_cons(f0)} (s_Bool_read_0(s_Bool_cons(f0))) == (f0)
  }
  axiom ax_s_Bool_cons {
    forall self: s_Bool :: {s_Bool_cons(s_Bool_read_0(self))} (s_Bool_cons(s_Bool_read_0(self))) == (self)
  }
  axiom ax_s_Bool_write_0_read_0 {
    forall self: s_Bool, val: Bool :: {s_Bool_read_0(s_Bool_write_0(self, val))} (s_Bool_read_0(s_Bool_write_0(self, val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_read_0(s_Bool): Bool
  function s_Bool_write_0(s_Bool, Bool): s_Bool
}

domain s_2_Tuple[T0, T1] {
  axiom ax_s_2_Tuple_cons_read_0 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_0(s_2_Tuple_cons(f0, f1))) == (f0)
  }
  axiom ax_s_2_Tuple_cons_read_1 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_1(s_2_Tuple_cons(f0, f1))) == (f1)
  }
  axiom ax_s_2_Tuple_cons {
    forall self: s_2_Tuple[T0, T1] :: {s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))} (s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))) == (self)
  }
  axiom ax_s_2_Tuple_write_0_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_2_Tuple_write_0_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))) == (s_2_Tuple_read_1(self))
  }
  axiom ax_s_2_Tuple_write_1_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))) == (s_2_Tuple_read_0(self))
  }
  axiom ax_s_2_Tuple_write_1_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))) == (val)
  }
  function s_2_Tuple_cons(T0, T1): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_0(s_2_Tuple[T0, T1]): T0
  function s_2_Tuple_write_0(s_2_Tuple[T0, T1], T0): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_1(s_2_Tuple[T0, T1]): T1
  function s_2_Tuple_write_1(s_2_Tuple[T0, T1], T1): s_2_Tuple[T0, T1]
}

domain s_Ref_Not[T] {
  axiom ax_s_Ref_Not_cons_read_0 {
    forall f0: T :: {s_Ref_Not_cons(f0)} (s_Ref_Not_read_0(s_Ref_Not_cons(f0))) == (f0)
  }
  axiom ax_s_Ref_Not_cons {
    forall self: s_Ref_Not[T] :: {s_Ref_Not_cons(s_Ref_Not_read_0(self))} (s_Ref_Not_cons(s_Ref_Not_read_0(self))) == (self)
  }
  axiom ax_s_Ref_Not_write_0_read_0 {
    forall self: s_Ref_Not[T], val: T :: {s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))} (s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))) == (val)
  }
  function s_Ref_Not_cons(T): s_Ref_Not[T]
  function s_Ref_Not_read_0(s_Ref_Not[T]): T
  function s_Ref_Not_write_0(s_Ref_Not[T], T): s_Ref_Not[T]
}

domain s_0_Tuple {
  function s_0_Tuple_cons(): s_0_Tuple
}

domain s_3_Tuple[T0, T1, T2] {
  axiom ax_s_3_Tuple_cons_read_0 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_0(s_3_Tuple_cons(f0, f1, f2))) == (f0)
  }
  axiom ax_s_3_Tuple_cons_read_1 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_1(s_3_Tuple_cons(f0, f1, f2))) == (f1)
  }
  axiom ax_s_3_Tuple_cons_read_2 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_2(s_3_Tuple_cons(f0, f1, f2))) == (f2)
  }
  axiom ax_s_3_Tuple_cons {
    forall self: s_3_Tuple[T0, T1, T2] :: {s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))} (s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))) == (self)
  }
  axiom ax_s_3_Tuple_write_0_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_0_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_0_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_1_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_1_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_1_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_2_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_2_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_2_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))) == (val)
  }
  function s_3_Tuple_cons(T0, T1, T2): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_0(s_3_Tuple[T0, T1, T2]): T0
  function s_3_Tuple_write_0(s_3_Tuple[T0, T1, T2], T0): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_1(s_3_Tuple[T0, T1, T2]): T1
  function s_3_Tuple_write_1(s_3_Tuple[T0, T1, T2], T1): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_2(s_3_Tuple[T0, T1, T2]): T2
  function s_3_Tuple_write_2(s_3_Tuple[T0, T1, T2], T2): s_3_Tuple[T0, T1, T2]
}

domain s_Never {
}

// -----------------------------
// types
// -----------------------------
field f_Int_i32: s_Int_i32
function p_Int_i32_unreachable(
): s_Int_i32
  requires false
  ensures false

function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires acc(p_Int_i32(self), wildcard)
{
  unfolding acc(p_Int_i32(self), wildcard) in (self.f_Int_i32)
}

predicate p_Int_i32(self: Ref) {
  acc(self.f_Int_i32)
}

method assign_p_Int_i32(
  self: Ref,
  self_new: s_Int_i32
)
  ensures p_Int_i32(self)
  ensures (p_Int_i32_snap(self)) == (self_new)

function p_Vector_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Vector_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Vector_unreachable(
): s_Vector
  requires false
  ensures false

function p_Vector_snap(
  self: Ref
): s_Vector
  requires acc(p_Vector(self), wildcard)
{
  unfolding acc(p_Vector(self), wildcard) in (s_Vector_cons(p_Int_i32_snap(p_Vector_field_0(self)), p_Int_i32_snap(p_Vector_field_1(self))))
}

predicate p_Vector(self: Ref) {
  (p_Int_i32(p_Vector_field_0(self))) && (p_Int_i32(p_Vector_field_1(self)))
}

method assign_p_Vector(
  self: Ref,
  self_new: s_Vector
)
  ensures p_Vector(self)
  ensures (p_Vector_snap(self)) == (self_new)

field f_Bool: s_Bool
function p_Bool_unreachable(
): s_Bool
  requires false
  ensures false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires acc(p_Bool(self), wildcard)
{
  unfolding acc(p_Bool(self), wildcard) in (self.f_Bool)
}

predicate p_Bool(self: Ref) {
  acc(self.f_Bool)
}

method assign_p_Bool(
  self: Ref,
  self_new: s_Bool
)
  ensures p_Bool(self)
  ensures (p_Bool_snap(self)) == (self_new)

function p_2_Tuple_$_Int_i32_$_Bool_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Int_i32_$_Bool_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Int_i32_$_Bool_unreachable(
): s_2_Tuple[s_Int_i32, s_Bool]
  requires false
  ensures false

function p_2_Tuple_$_Int_i32_$_Bool_snap(
  self: Ref
): s_2_Tuple[s_Int_i32, s_Bool]
  requires acc(p_2_Tuple_$_Int_i32_$_Bool(self), wildcard)
{
  unfolding acc(p_2_Tuple_$_Int_i32_$_Bool(self), wildcard) in (s_2_Tuple_cons(p_Int_i32_snap(p_2_Tuple_$_Int_i32_$_Bool_field_0(self)), p_Bool_snap(p_2_Tuple_$_Int_i32_$_Bool_field_1(self))))
}

predicate p_2_Tuple_$_Int_i32_$_Bool(self: Ref) {
  (p_Int_i32(p_2_Tuple_$_Int_i32_$_Bool_field_0(self))) && (p_Bool(p_2_Tuple_$_Int_i32_$_Bool_field_1(self)))
}

method assign_p_2_Tuple_$_Int_i32_$_Bool(
  self: Ref,
  self_new: s_2_Tuple[s_Int_i32, s_Bool]
)
  ensures p_2_Tuple_$_Int_i32_$_Bool(self)
  ensures (p_2_Tuple_$_Int_i32_$_Bool_snap(self)) == (self_new)

function p_0_Tuple_unreachable(
): s_0_Tuple
  requires false
  ensures false

function p_0_Tuple_snap(
  self: Ref
): s_0_Tuple
  requires acc(p_0_Tuple(self), wildcard)
{
  unfolding acc(p_0_Tuple(self), wildcard) in (s_0_Tuple_cons())
}

predicate p_0_Tuple(self: Ref) {
  true
}

method assign_p_0_Tuple(
  self: Ref,
  self_new: s_0_Tuple
)
  ensures p_0_Tuple(self)
  ensures (p_0_Tuple_snap(self)) == (self_new)

function p_Never_unreachable(
): s_Never
  requires false
  ensures false

function p_Never_snap(
  self: Ref
): s_Never
  requires acc(p_Never(self), wildcard)

predicate p_Never(self: Ref) {
  false
}

method assign_p_Never(
  self: Ref,
  self_new: s_Never
)
  ensures p_Never(self)
  ensures (p_Never_snap(self)) == (self_new)

