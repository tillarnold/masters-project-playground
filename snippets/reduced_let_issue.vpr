

method m_client(original_vec: Vector)
requires (Vector_len(original_vec)) > 10
{
  var lower: Int := 100;
  var upper: Int := 200;

  // create new vector with same length
  var clamped_vec: Vector := Vector_cons(Vector_len(original_vec))


  assert f_get(clamped_vec, s_Int_i32_cons(0)) == f_get(clamped_vec, s_Int_i32_cons(0)) 

  // Assume that `clamped_vec` is `original_vec` but clamped between `lower` and `upper`
  assume 
    (forall qvar: s_Int_i32 :: (
      (let qvar_alias == (qvar) in
      (0 > s_Int_i32_val(qvar) ||  s_Int_i32_val(qvar_alias) >= Vector_len(original_vec)
        ? true // qvar is outside the bounds of the vector
        : f_get(clamped_vec, qvar_alias) == f_clamp(f_get(original_vec, qvar_alias), lower, upper)
    ))))

  assert 
    (forall qvar_0_0: s_Int_i32 :: 
      (
        (0 > s_Int_i32_val(qvar_0_0)) ||
        (s_Int_i32_val(qvar_0_0) >= Vector_len(clamped_vec)) ||
        (let val == (f_get(clamped_vec, qvar_0_0)) in (val <= upper) && (val >= lower))
      )
    )

}



// -----------------------------
// functions
// -----------------------------
function f_get(
  vec: Vector,
  _2p: s_Int_i32
): Int
  requires s_Int_i32_val(_2p) >= 0
  requires s_Int_i32_val(_2p) < Vector_len(vec)
  requires Vector_len(vec) >= 0




function f_clamp(
  val: Int,
  lower: Int,
  upper: Int
): Int
{(
 val < lower ? lower :
 val > upper ? upper :
 val
)}



// -----------------------------
// types
// -----------------------------
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  axiom ax_inverse_s_Int_i32_cons_s_Int_i32_val {
    forall val: s_Int_i32 :: {s_Int_i32_val(val)} (s_Int_i32_cons(s_Int_i32_val(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}





domain Vector {
  axiom ax_Vector_cons_read_0 {
    forall f0: Int :: {Vector_cons(f0)} (Vector_len(Vector_cons(f0))) == (f0)
  }
  axiom ax_Vector_cons {
    forall self: Vector :: {Vector_cons(Vector_len(self))} (Vector_cons(Vector_len(self))) == (self)
  }
  function Vector_cons(Int): Vector
  function Vector_len(Vector): Int
}









