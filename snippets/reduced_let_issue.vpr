

method m_client(original_vec_s: s_Vector)
{


  var lower: Int := 100;
  var upper: Int := 200;

  // create new vector with same length
  var clamped_vec_s: s_Vector := s_Vector_cons(s_Vector_len(original_vec_s))



  // Assume that clamped_vec_p is original_vec_p but clamped between 
  assume 
(forall qvar: s_Int_i32 :: (
(let qvar_alias == (qvar) in
  (0 <= s_Int_i32_val(qvar) // replace qvar_alias with qvar here
    ? (
      s_Int_i32_val(qvar_alias) < (s_Vector_len(original_vec_s))
      ? f_get(clamped_vec_s, qvar_alias) == ((f_clamp( f_get(original_vec_s, qvar_alias), lower, upper)))
      : true
      )
    : true 
))))

  assert 
    (forall qvar_0_0: s_Int_i32 :: 
      (
        (0 > s_Int_i32_val(qvar_0_0)) ||
        (s_Int_i32_val(qvar_0_0) >= ((s_Vector_len(clamped_vec_s)))) ||
        (let val == (f_get(clamped_vec_s, qvar_0_0)) in (val <= upper) && (val >= lower))
      )
    )

}


// -----------------------------
// functions
// -----------------------------
function f_get(
  vec: s_Vector,
  _2p: s_Int_i32
): Int
  requires s_Int_i32_val(_2p) >= 0
  requires s_Int_i32_val(_2p) < s_Vector_len(vec)
  requires s_Vector_len(vec) >= 0




function f_clamp(
  val: Int,
  lower: Int,
  upper: Int
): Int
{(
 val < lower ? lower :
 val > upper ? upper :
 val
)}



// -----------------------------
// types
// -----------------------------
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  axiom ax_inverse_s_Int_i32_cons_s_Int_i32_val {
    forall val: s_Int_i32 :: {s_Int_i32_val(val)} (s_Int_i32_cons(s_Int_i32_val(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}





domain s_Vector {

  axiom ax_s_Vector_cons_read_0 {
    forall f0: Int :: {s_Vector_cons(f0)} (s_Vector_len(s_Vector_cons(f0))) == (f0)
  }
  axiom ax_s_Vector_cons {
    forall self: s_Vector :: {s_Vector_cons(s_Vector_len(self))} (s_Vector_cons(s_Vector_len(self))) == (self)
  }
  function s_Vector_cons(Int): s_Vector
  function s_Vector_len(s_Vector): Int
}









