method m_apply_row_by_row(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  requires p_Adt_ClampTransform(_1p)
  requires p_Adt_Vector(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(_0_3s_0))) in
(let _0_7s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple0_cons()) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (Tuple_3_cons(_0_2s_0, _0_3s_0, _0_7s_1)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_6s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_6s_1 == (_1_2s_0) in
(let _1_5s_1 == (s_Bool_cons((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(_1_6s_1)))) in // replace _1_6s_1 with qvar_0_0 here
(let _1_phi_0 == ((_1_5s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_8s_1 == (_1_2s_0) in
    (let _1_9s_1 == (s_Adt_Vector_read_0(Tuple_3_elem_0(_1_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_1_8s_1)) < (s_Int_i32_val(_1_9s_1)))))) in
(let _1_4s_3 == (_1_phi_0) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_12s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(Tuple_3_elem_1(_1_1s_0))) in
  (let _1_13s_1 == (_1_2s_0) in
  (let _1_11s_1 == (f_get(_1_12s_1, _1_13s_1)) in
  (let _1_15s_1 == (Tuple_3_elem_2(_1_1s_0)) in
  (let _1_17s_1 == (Tuple_3_elem_0(_1_1s_0)) in
  (let _1_18s_1 == (_1_2s_0) in
  (let _1_16s_1 == (f_get(_1_17s_1, _1_18s_1)) in
  (let _1_14s_1 == (f_do_transform(_1_15s_1, _1_16s_1)) in
  s_Bool_cons((_1_11s_1) == (_1_14s_1))))))))))
: s_Bool_cons(true)))))))))))))))))
 // Body removed to minimize example





method m_assert_true(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Bool(_1p)
  requires s_Bool_val(p_Bool_snap(_1p))
  ensures p_Tuple0(_0p)
{
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
}

method m_assert_eq(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Int_i32_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
s_Bool_cons((_0_4s_1) == (_0_5s_1)))))))
  ensures p_Tuple0(_0p)
{
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
}


method m_final_assert(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Tuple0_cons()) in
(let _0_4s_1 == (_0_1s_0) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_4s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_6s_1 == (_1_2s_0) in
(let _1_5s_1 == (s_Bool_cons((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(_1_6s_1)))) in
(let _1_phi_0 == ((_1_5s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_8s_1 == (_1_2s_0) in
    (let _1_9s_1 == (s_Adt_Vector_read_0(_1_1s_0)) in
    s_Bool_cons((s_Int_i32_val(_1_8s_1)) < (s_Int_i32_val(_1_9s_1)))))) in
(let _1_4s_3 == (_1_phi_0) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_12s_1 == (_1_1s_0) in
  (let _1_13s_1 == (_1_2s_0) in
  (let _1_11s_1 == (f_get(_1_12s_1, _1_13s_1)) in
  f_between(_1_11s_1, s_Int_i32_cons(100), s_Int_i32_cons(200)))))
: s_Bool_cons(true))))))))))))))
  ensures p_Tuple0(_0p)
{
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
}

method m_make_clamp(
  _0p: Ref,
  _1p: Ref
)
  requires p_Adt_ClampTransform(_0p)
  requires p_Adt_Bounds(_1p)
  ensures p_Adt_ClampTransform(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Bounds_snap(_1p))) in
(let _0_2s_0 == (p_Adt_ClampTransform_snap(_0p)) in
(let _0_4s_1 == (s_Adt_ClampTransform_read_0(_0_2s_0)) in
(let _0_6s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_6s_1) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))))
// body removed


method m_client(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_3s_1)) >= (s_Int_i32_val(s_Int_i32_cons(10)))))))
  ensures p_Tuple0(_0p)
{
label start
  var _2p: Ref
  inhale p_Adt_ClampTransform(_2p)
  var _3p: Ref
  inhale p_Adt_Bounds(_3p)
  var _4p: Ref
  inhale p_Adt_Vector(_4p)
  var _5p: Ref
  inhale p_Adt_ClampTransform(_5p)
  var _6p: Ref
  inhale p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_6p)
  var _7p: Ref
  inhale p_Adt_ClampTransform(_7p)
  var _8p: Ref
  inhale p_Adt_Vector(_8p)
  var _9p: Ref
  inhale p_Tuple0(_9p)
  var _10p: Ref
  inhale p_Adt_Vector(_10p)
  goto bb_0
label bb_0
  // _3 = Bounds { upper: const 200_i32, lower: const 100_i32 }
  unfold p_Adt_Bounds(_3p)
  reassign_p_Int_i32(p_Adt_Bounds_field_0(_3p), s_Int_i32_cons(200))
  reassign_p_Int_i32(p_Adt_Bounds_field_1(_3p), s_Int_i32_cons(100))
  fold p_Adt_Bounds(_3p)
  m_make_clamp(_2p, _3p)
  goto bb_1
label bb_1
  // FakeRead(ForLet(None), _2)
  // _7 = _2
  reassign_p_Adt_ClampTransform(_7p, p_Adt_ClampTransform_snap(_2p))
  // _8 = move _1
  reassign_p_Adt_Vector(_8p, p_Adt_Vector_snap(_1p))
  m_apply_row_by_row(_6p, _7p, _8p)
  goto bb_2
label bb_2
  // PlaceMention(_6)
  // _4 = move (_6.0: Vector)
  unfold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_6p)
  reassign_p_Adt_Vector(_4p, p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(_6p)))
  // _5 = (_6.1: ClampTransform)
  reassign_p_Adt_ClampTransform(_5p, p_Adt_ClampTransform_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(_6p)))
  // _10 = move _4
  reassign_p_Adt_Vector(_10p, p_Adt_Vector_snap(_4p))
  m_final_assert(_9p, _10p)
  goto bb_3
label bb_3
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label bb_4
  assert false // terminator resume
label end
  // return
}


// -----------------------------
// functions
// -----------------------------
function f_get(
  _1p: s_Adt_Vector,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))

function f_between(
  _1p: s_Int_i32,
  _2p: s_Int_i32,
  _3p: s_Int_i32
): s_Bool
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (_3p) in
(let _0_5s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_3s_0) in
(let _0_4s_1 == (s_Bool_cons((s_Int_i32_val(_0_5s_1)) <= (s_Int_i32_val(_0_6s_1)))) in
(_0_4s_1) == (s_Bool_cons(false))
? s_Bool_cons(false)
: (let _0_8s_1 == (_0_1s_0) in
  (let _0_9s_1 == (_0_2s_0) in
  s_Bool_cons((s_Int_i32_val(_0_8s_1)) >= (s_Int_i32_val(_0_9s_1)))))))))))
}

function f_min(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(_0_5s_1)))) in
(_0_3s_1) == (s_Bool_cons(false))
? _0_1s_0
: _0_2s_0)))))
}

function f_max(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) > (s_Int_i32_val(_0_5s_1)))) in
(_0_3s_1) == (s_Bool_cons(false))
? _0_2s_0
: _0_1s_0)))))
}

function f_do_transform(
  _1p: s_Adt_ClampTransform,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) < (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_11s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_11s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_9s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_7s_1 == (s_Bool_cons((s_Int_i32_val(_0_8s_1)) >= (s_Int_i32_val(_0_9s_1)))) in
(let _0_phi_0 == ((_0_7s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _0_11s_1 == (_0_2s_0) in
    (let _0_12s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_0_11s_1)) <= (s_Int_i32_val(_0_12s_1)))))) in
(let _0_6s_3 == (_0_phi_0) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_3)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_14s_1 == (_0_3s_0) in
  (let _0_15s_1 == (_0_2s_0) in
  s_Bool_cons((_0_14s_1) == (_0_15s_1))))
: s_Bool_cons(true)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) <= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_7s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
f_between(_0_5s_1, _0_6s_1, _0_7s_1))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (_0_2s_0) in
(let _0_4s_1 == (f_min(_0_5s_1, _0_6s_1)) in
f_max(_0_3s_1, _0_4s_1)))))))
}


// -----------------------------
// types
// -----------------------------
field f_s_Int_i32: s_Int_i32
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  axiom ax_inverse_s_Int_i32_cons_s_Int_i32_val {
    forall val: s_Int_i32 :: {s_Int_i32_val(val)} (s_Int_i32_cons(s_Int_i32_val(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}



function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires p_Int_i32(self)
{
  unfolding p_Int_i32(self) in (self.f_s_Int_i32)
}

predicate p_Int_i32(self_p: Ref) {
  acc(self_p.f_s_Int_i32)
}

method assign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

method reassign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  requires p_Int_i32(_p)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

domain s_Adt_Vector {
  axiom ax_s_Adt_Vector_write_0_read_0 {
    forall self: s_Adt_Vector, val: s_Int_i32 :: {s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))} (s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32 :: {s_Adt_Vector_cons(f0)} (s_Adt_Vector_read_0(s_Adt_Vector_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_Vector_cons {
    forall self: s_Adt_Vector :: {s_Adt_Vector_cons(s_Adt_Vector_read_0(self))} (s_Adt_Vector_cons(s_Adt_Vector_read_0(self))) == (self)
  }
  function s_Adt_Vector_cons(s_Int_i32): s_Adt_Vector
  function s_Adt_Vector_read_0(s_Adt_Vector): s_Int_i32
  function s_Adt_Vector_write_0(s_Adt_Vector, s_Int_i32): s_Adt_Vector
}

function p_Adt_Vector_field_0(
  self: Ref
): Ref
function s_Adt_Vector_unreachable(
): s_Adt_Vector
  requires false

function p_Adt_Vector_snap(
  self_p: Ref
): s_Adt_Vector
  requires p_Adt_Vector(self_p)
{
  unfolding p_Adt_Vector(self_p) in (s_Adt_Vector_cons(p_Int_i32_snap(p_Adt_Vector_field_0(self_p))))
}

predicate p_Adt_Vector(self_p: Ref) {
  p_Int_i32(p_Adt_Vector_field_0(self_p))
}


method reassign_p_Adt_Vector(
  _p: Ref,
  _s_new: s_Adt_Vector
)
  requires p_Adt_Vector(_p)
  ensures p_Adt_Vector(_p)
  ensures (p_Adt_Vector_snap(_p)) == (_s_new)

domain s_Adt_Bounds {
  axiom ax_s_Adt_Bounds_write_0_read_0 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_0(s_Adt_Bounds_write_0(self, val))} (s_Adt_Bounds_read_0(s_Adt_Bounds_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Bounds_write_0_read_1 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_1(s_Adt_Bounds_write_0(self, val))} (s_Adt_Bounds_read_1(s_Adt_Bounds_write_0(self, val))) == (s_Adt_Bounds_read_1(self))
  }
  axiom ax_s_Adt_Bounds_write_1_read_0 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_0(s_Adt_Bounds_write_1(self, val))} (s_Adt_Bounds_read_0(s_Adt_Bounds_write_1(self, val))) == (s_Adt_Bounds_read_0(self))
  }
  axiom ax_s_Adt_Bounds_write_1_read_1 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_1(s_Adt_Bounds_write_1(self, val))} (s_Adt_Bounds_read_1(s_Adt_Bounds_write_1(self, val))) == (val)
  }
  axiom ax_s_Adt_Bounds_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Adt_Bounds_cons(f0, f1)} (s_Adt_Bounds_read_0(s_Adt_Bounds_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Adt_Bounds_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Adt_Bounds_cons(f0, f1)} (s_Adt_Bounds_read_1(s_Adt_Bounds_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Adt_Bounds_cons {
    forall self: s_Adt_Bounds :: {s_Adt_Bounds_cons(s_Adt_Bounds_read_0(self), s_Adt_Bounds_read_1(self))} (s_Adt_Bounds_cons(s_Adt_Bounds_read_0(self), s_Adt_Bounds_read_1(self))) == (self)
  }
  function s_Adt_Bounds_cons(s_Int_i32, s_Int_i32): s_Adt_Bounds
  function s_Adt_Bounds_read_0(s_Adt_Bounds): s_Int_i32
  function s_Adt_Bounds_write_0(s_Adt_Bounds, s_Int_i32): s_Adt_Bounds
  function s_Adt_Bounds_read_1(s_Adt_Bounds): s_Int_i32
  function s_Adt_Bounds_write_1(s_Adt_Bounds, s_Int_i32): s_Adt_Bounds
}

function p_Adt_Bounds_field_0(
  self: Ref
): Ref
function p_Adt_Bounds_field_1(
  self: Ref
): Ref
function s_Adt_Bounds_unreachable(
): s_Adt_Bounds
  requires false

function p_Adt_Bounds_snap(
  self_p: Ref
): s_Adt_Bounds
  requires p_Adt_Bounds(self_p)
{
  unfolding p_Adt_Bounds(self_p) in (s_Adt_Bounds_cons(p_Int_i32_snap(p_Adt_Bounds_field_0(self_p)), p_Int_i32_snap(p_Adt_Bounds_field_1(self_p))))
}

predicate p_Adt_Bounds(self_p: Ref) {
  (p_Int_i32(p_Adt_Bounds_field_0(self_p))) && (p_Int_i32(p_Adt_Bounds_field_1(self_p)))
}

method assign_p_Adt_Bounds(
  _p: Ref,
  _s_new: s_Adt_Bounds
)
  ensures p_Adt_Bounds(_p)
  ensures (p_Adt_Bounds_snap(_p)) == (_s_new)

method reassign_p_Adt_Bounds(
  _p: Ref,
  _s_new: s_Adt_Bounds
)
  requires p_Adt_Bounds(_p)
  ensures p_Adt_Bounds(_p)
  ensures (p_Adt_Bounds_snap(_p)) == (_s_new)

domain s_Adt_ClampTransform {
  axiom ax_s_Adt_ClampTransform_write_0_read_0 {
    forall self: s_Adt_ClampTransform, val: s_Adt_Bounds :: {s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_write_0(self, val))} (s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_ClampTransform_cons_read_0 {
    forall f0: s_Adt_Bounds :: {s_Adt_ClampTransform_cons(f0)} (s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_ClampTransform_cons {
    forall self: s_Adt_ClampTransform :: {s_Adt_ClampTransform_cons(s_Adt_ClampTransform_read_0(self))} (s_Adt_ClampTransform_cons(s_Adt_ClampTransform_read_0(self))) == (self)
  }
  function s_Adt_ClampTransform_cons(s_Adt_Bounds): s_Adt_ClampTransform
  function s_Adt_ClampTransform_read_0(s_Adt_ClampTransform): s_Adt_Bounds
  function s_Adt_ClampTransform_write_0(s_Adt_ClampTransform, s_Adt_Bounds): s_Adt_ClampTransform
}

function p_Adt_ClampTransform_field_0(
  self: Ref
): Ref
function s_Adt_ClampTransform_unreachable(
): s_Adt_ClampTransform
  requires false

function p_Adt_ClampTransform_snap(
  self_p: Ref
): s_Adt_ClampTransform
  requires p_Adt_ClampTransform(self_p)
{
  unfolding p_Adt_ClampTransform(self_p) in (s_Adt_ClampTransform_cons(p_Adt_Bounds_snap(p_Adt_ClampTransform_field_0(self_p))))
}

predicate p_Adt_ClampTransform(self_p: Ref) {
  p_Adt_Bounds(p_Adt_ClampTransform_field_0(self_p))
}

method assign_p_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Adt_ClampTransform
)
  ensures p_Adt_ClampTransform(_p)
  ensures (p_Adt_ClampTransform_snap(_p)) == (_s_new)

method reassign_p_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Adt_ClampTransform
)
  requires p_Adt_ClampTransform(_p)
  ensures p_Adt_ClampTransform(_p)
  ensures (p_Adt_ClampTransform_snap(_p)) == (_s_new)

domain s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform {
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons_read_0 {
    forall f0: s_Adt_Vector, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons_read_1 {
    forall f0: s_Adt_Vector, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))) == (self)
  }
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Adt_Vector, s_Adt_ClampTransform): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform): s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, s_Adt_Vector): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform): s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, s_Adt_ClampTransform): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
}

function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_unreachable(
): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  requires false

function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(
  self_p: Ref
): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p)
{
  unfolding p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p) in (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(self_p)), p_Adt_ClampTransform_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(self_p))))
}

predicate p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p: Ref) {
  (p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(self_p))) && (p_Adt_ClampTransform(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(self_p)))
}

method assign_p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
)
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_p)) == (_s_new)

field f_Tuple0: s_Tuple0
domain s_Tuple0 {
  function s_Tuple0_cons(): s_Tuple0
}

function s_Tuple0_unreachable(
): s_Tuple0
  requires false

function p_Tuple0_snap(
  self: Ref
): s_Tuple0
  requires p_Tuple0(self)

predicate p_Tuple0(self_p: Ref)

method assign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

method reassign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  requires p_Tuple0(_p)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

field f_Bool: s_Bool
domain s_Bool {
  axiom ax_inverse_s_Bool_val_s_Bool_cons {
    forall val: Bool :: {s_Bool_cons(val)} (s_Bool_val(s_Bool_cons(val))) == (val)
  }
  axiom ax_inverse_s_Bool_cons_s_Bool_val {
    forall val: s_Bool :: {s_Bool_val(val)} (s_Bool_cons(s_Bool_val(val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_val(s_Bool): Bool
}

function s_Bool_unreachable(
): s_Bool
  requires false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires p_Bool(self)
{
  unfolding p_Bool(self) in (self.f_Bool)
}

predicate p_Bool(self_p: Ref) {
  acc(self_p.f_Bool)
}

method assign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)

method reassign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  requires p_Bool(_p)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)




// -----------------------------
// utility types
// -----------------------------
domain Tuple_3[T0, T1, T2] {
  axiom ax_Tuple_3_elem {
    forall elem0: T0, elem1: T1, elem2: T2 :: {Tuple_3_cons(elem0, elem1, elem2)} (((Tuple_3_elem_0(Tuple_3_cons(elem0, elem1, elem2))) == (elem0)) && ((Tuple_3_elem_1(Tuple_3_cons(elem0, elem1, elem2))) == (elem1))) && ((Tuple_3_elem_2(Tuple_3_cons(elem0, elem1, elem2))) == (elem2))
  }
  function Tuple_3_elem_0(Tuple_3[T0, T1, T2]): T0
  function Tuple_3_elem_1(Tuple_3[T0, T1, T2]): T1
  function Tuple_3_elem_2(Tuple_3[T0, T1, T2]): T2
  function Tuple_3_cons(T0, T1, T2): Tuple_3[T0, T1, T2]
}

domain Tuple_1[T0] {
  axiom ax_Tuple_1_elem {
    forall elem0: T0 :: {Tuple_1_cons(elem0)} (Tuple_1_elem_0(Tuple_1_cons(elem0))) == (elem0)
  }
  function Tuple_1_elem_0(Tuple_1[T0]): T0
  function Tuple_1_cons(T0): Tuple_1[T0]
}

domain Tuple_4[T0, T1, T2, T3] {
  axiom ax_Tuple_4_elem {
    forall elem0: T0, elem1: T1, elem2: T2, elem3: T3 :: {Tuple_4_cons(elem0, elem1, elem2, elem3)} ((((Tuple_4_elem_0(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem0)) && ((Tuple_4_elem_1(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem1))) && ((Tuple_4_elem_2(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem2))) && ((Tuple_4_elem_3(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem3))
  }
  function Tuple_4_elem_0(Tuple_4[T0, T1, T2, T3]): T0
  function Tuple_4_elem_1(Tuple_4[T0, T1, T2, T3]): T1
  function Tuple_4_elem_2(Tuple_4[T0, T1, T2, T3]): T2
  function Tuple_4_elem_3(Tuple_4[T0, T1, T2, T3]): T3
  function Tuple_4_cons(T0, T1, T2, T3): Tuple_4[T0, T1, T2, T3]
}

