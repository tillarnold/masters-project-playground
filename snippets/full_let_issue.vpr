// -----------------------------
// methods
// -----------------------------
method m_impure_get(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple2_s_Int_i32_s_Adt_Vector(_0p)
  requires p_Adt_Vector(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (_0_2s_0) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (_0_2s_0) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  ensures p_Tuple2_s_Int_i32_s_Adt_Vector(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (f_get(_0_7s_1, _0_8s_1)) in
s_Bool_cons((_0_5s_1) == (_0_6s_1))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))

method m_do_transform_impure(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  requires p_Adt_ClampTransform(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  ensures p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) < (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
  (let _0_11s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
  (let _0_11s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_9s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_7s_1 == (s_Bool_cons((s_Int_i32_val(_0_8s_1)) >= (s_Int_i32_val(_0_9s_1)))) in
(let _0_phi_0 == ((_0_7s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _0_11s_1 == (_0_2s_0) in
    (let _0_12s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_0_11s_1)) <= (s_Int_i32_val(_0_12s_1)))))) in
(let _0_6s_3 == (_0_phi_0) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_3)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_14s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
  (let _0_15s_1 == (_0_2s_0) in
  s_Bool_cons((_0_14s_1) == (_0_15s_1))))
: s_Bool_cons(true)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
(let _0_6s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) <= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
(let _0_6s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (f_do_transform(_0_7s_1, _0_8s_1)) in
s_Bool_cons((_0_5s_1) == (_0_6s_1))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
{
label start
  var _3p: Ref
  inhale p_Bool(_3p)
  var _4p: Ref
  inhale p_Int_i32(_4p)
  var _5p: Ref
  inhale p_Int_i32(_5p)
  var _6p: Ref
  inhale p_Int_i32(_6p)
  var _7p: Ref
  inhale p_Adt_ClampTransform(_7p)
  var _8p: Ref
  inhale p_Bool(_8p)
  var _9p: Ref
  inhale p_Int_i32(_9p)
  var _10p: Ref
  inhale p_Int_i32(_10p)
  var _11p: Ref
  inhale p_Int_i32(_11p)
  var _12p: Ref
  inhale p_Adt_ClampTransform(_12p)
  var _13p: Ref
  inhale p_Int_i32(_13p)
  var _14p: Ref
  inhale p_Adt_ClampTransform(_14p)
  goto bb_0
label bb_0
  // _4 = _2
  reassign_p_Int_i32(_4p, p_Int_i32_snap(_2p))
  // _5 = ((_1.0: Bounds).1: i32)
  unfold p_Adt_ClampTransform(_1p)
  unfold p_Adt_Bounds(p_Adt_ClampTransform_field_0(_1p))
  reassign_p_Int_i32(_5p, p_Int_i32_snap(p_Adt_Bounds_field_1(p_Adt_ClampTransform_field_0(_1p))))
  // _3 = Lt(move _4, move _5)
  reassign_p_Bool(_3p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_4p))) < (s_Int_i32_val(p_Int_i32_snap(_5p)))))
  if (p_Bool_snap(_3p) == s_Bool_cons(false)) { goto bb_2 }
  else { goto bb_1 }
label bb_1
  // _6 = ((_1.0: Bounds).1: i32)
  reassign_p_Int_i32(_6p, p_Int_i32_snap(p_Adt_Bounds_field_1(p_Adt_ClampTransform_field_0(_1p))))
  // _7 = _1
  fold p_Adt_Bounds(p_Adt_ClampTransform_field_0(_1p))
  fold p_Adt_ClampTransform(_1p)
  reassign_p_Adt_ClampTransform(_7p, p_Adt_ClampTransform_snap(_1p))
  // _0 = (move _6, move _7)
  unfold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  reassign_p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(_0p), p_Int_i32_snap(_6p))
  reassign_p_Adt_ClampTransform(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(_0p), p_Adt_ClampTransform_snap(_7p))
  fold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  goto bb_6
label bb_2
  // _9 = _2
  reassign_p_Int_i32(_9p, p_Int_i32_snap(_2p))
  // _10 = ((_1.0: Bounds).0: i32)
  reassign_p_Int_i32(_10p, p_Int_i32_snap(p_Adt_Bounds_field_0(p_Adt_ClampTransform_field_0(_1p))))
  // _8 = Gt(move _9, move _10)
  reassign_p_Bool(_8p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_9p))) > (s_Int_i32_val(p_Int_i32_snap(_10p)))))
  if (p_Bool_snap(_8p) == s_Bool_cons(false)) { goto bb_4 }
  else { goto bb_3 }
label bb_3
  // _11 = ((_1.0: Bounds).0: i32)
  reassign_p_Int_i32(_11p, p_Int_i32_snap(p_Adt_Bounds_field_0(p_Adt_ClampTransform_field_0(_1p))))
  // _12 = _1
  fold p_Adt_Bounds(p_Adt_ClampTransform_field_0(_1p))
  fold p_Adt_ClampTransform(_1p)
  reassign_p_Adt_ClampTransform(_12p, p_Adt_ClampTransform_snap(_1p))
  // _0 = (move _11, move _12)
  unfold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  reassign_p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(_0p), p_Int_i32_snap(_11p))
  reassign_p_Adt_ClampTransform(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(_0p), p_Adt_ClampTransform_snap(_12p))
  fold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  goto bb_5
label bb_4
  // _13 = _2
  reassign_p_Int_i32(_13p, p_Int_i32_snap(_2p))
  // _14 = _1
  fold p_Adt_Bounds(p_Adt_ClampTransform_field_0(_1p))
  fold p_Adt_ClampTransform(_1p)
  reassign_p_Adt_ClampTransform(_14p, p_Adt_ClampTransform_snap(_1p))
  // _0 = (move _13, move _14)
  unfold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  reassign_p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(_0p), p_Int_i32_snap(_13p))
  reassign_p_Adt_ClampTransform(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(_0p), p_Adt_ClampTransform_snap(_14p))
  fold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_0p)
  goto bb_5
label bb_5
  goto bb_6
label bb_6
  goto end
label end
  // return
}

method m_set(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref,
  _3p: Ref
)
  requires p_Adt_Vector(_0p)
  requires p_Adt_Vector(_1p)
  requires p_Int_i32(_2p)
  requires p_Int_i32(_3p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (_0_2s_0) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0)))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) < (s_Int_i32_val(_0_6s_1)))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0)))))))))
  ensures p_Adt_Vector(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
(let _0_7s_1 == (s_Adt_Vector_read_0(_0_4s_0)) in
s_Bool_cons((_0_6s_1) == (_0_7s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_7s_1 == (_0_4s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (f_get(_0_7s_1, _0_8s_1)) in
(let _0_9s_1 == (_0_3s_0) in
s_Bool_cons((_0_6s_1) == (_0_9s_1)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Tuple0_cons()) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_7s_1 == (Tuple_3_cons(_0_1s_0, _0_8s_1, _0_4s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_7s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_7s_1 == (_1_2s_0) in
(let _1_6s_1 == (s_Bool_cons((s_Int_i32_val(_1_7s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))) in
(let _1_phi_0 == ((_1_6s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_9s_1 == (_1_2s_0) in
    (let _1_10s_1 == (s_Adt_Vector_read_0(Tuple_3_elem_0(_1_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_1_9s_1)) < (s_Int_i32_val(_1_10s_1)))))) in
(let _1_5s_3 == (_1_phi_0) in
(let _1_phi_1 == ((_1_5s_3) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_13s_1 == (_1_2s_0) in
    (let _1_14s_1 == (Tuple_3_elem_1(_1_1s_0)) in
    (let _1_12s_1 == (s_Bool_cons((_1_13s_1) == (_1_14s_1))) in
    s_Bool_cons(!(s_Bool_val(_1_12s_1))))))) in
(let _1_4s_3 == (_1_phi_1) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_17s_1 == (Tuple_3_elem_2(_1_1s_0)) in
  (let _1_18s_1 == (_1_2s_0) in
  (let _1_16s_1 == (f_get(_1_17s_1, _1_18s_1)) in
  (let _1_20s_1 == (Tuple_3_elem_0(_1_1s_0)) in
  (let _1_21s_1 == (_1_2s_0) in
  (let _1_19s_1 == (f_get(_1_20s_1, _1_21s_1)) in
  s_Bool_cons((_1_16s_1) == (_1_19s_1))))))))
: s_Bool_cons(true))))))))))))))))))))

method m_apply_row_by_row_rec(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref,
  _3p: Ref
)
  requires p_Adt_Vector(_0p)
  requires p_Adt_ClampTransform(_1p)
  requires p_Adt_Vector(_2p)
  requires p_Int_i32(_3p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) < (s_Int_i32_val(_0_6s_1)))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (_0_3s_0) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0)))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(s_Int_i32_cons(1)))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) < (s_Int_i32_val(_0_6s_1)))))))))
  ensures p_Adt_Vector(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Adt_Vector_read_0(_0_4s_0)) in
(let _0_8s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
(let _0_7s_1 == (_0_8s_1) in
s_Bool_cons((_0_6s_1) == (_0_7s_1))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Tuple0_cons()) in
(let _0_8s_1 == (_0_3s_0) in
(let _0_7s_1 == (Tuple_3_cons(_0_8s_1, _0_2s_0, _0_4s_0)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_7s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_7s_1 == (_1_2s_0) in
(let _1_6s_1 == (s_Bool_cons((s_Int_i32_val(_1_7s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))) in
(let _1_phi_0 == ((_1_6s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_9s_1 == (_1_2s_0) in
    (let _1_10s_1 == (Tuple_3_elem_0(_1_1s_0)) in
    s_Bool_cons((s_Int_i32_val(_1_9s_1)) > (s_Int_i32_val(_1_10s_1)))))) in
(let _1_5s_3 == (_1_phi_0) in
(let _1_phi_1 == ((_1_5s_3) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_12s_1 == (_1_2s_0) in
    (let _1_13s_1 == (s_Adt_Vector_read_0(Tuple_3_elem_1(_1_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_1_12s_1)) < (s_Int_i32_val(_1_13s_1)))))) in
(let _1_4s_3 == (_1_phi_1) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_16s_1 == (Tuple_3_elem_2(_1_1s_0)) in
  (let _1_17s_1 == (_1_2s_0) in
  (let _1_15s_1 == (f_get(_1_16s_1, _1_17s_1)) in
  (let _1_19s_1 == (Tuple_3_elem_1(_1_1s_0)) in
  (let _1_20s_1 == (_1_2s_0) in
  (let _1_18s_1 == (f_get(_1_19s_1, _1_20s_1)) in
  s_Bool_cons((_1_15s_1) == (_1_18s_1))))))))
: s_Bool_cons(true))))))))))))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_7s_1 == (_0_4s_0) in
(let _0_8s_1 == (_0_3s_0) in
(let _0_6s_1 == (f_get(_0_7s_1, _0_8s_1)) in
(let _0_10s_1 == (_0_1s_0) in
(let _0_12s_1 == (_0_2s_0) in
(let _0_13s_1 == (_0_3s_0) in
(let _0_11s_1 == (f_get(_0_12s_1, _0_13s_1)) in
(let _0_9s_1 == (f_do_transform(_0_10s_1, _0_11s_1)) in
s_Bool_cons((_0_6s_1) == (_0_9s_1)))))))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_7s_1 == (_0_4s_0) in
(let _0_6s_1 == (f_get(_0_7s_1, s_Int_i32_cons(0))) in
(let _0_9s_1 == (_0_1s_0) in
(let _0_11s_1 == (_0_2s_0) in
(let _0_10s_1 == (f_get(_0_11s_1, s_Int_i32_cons(0))) in
(let _0_8s_1 == (f_do_transform(_0_9s_1, _0_10s_1)) in
s_Bool_cons((_0_6s_1) == (_0_8s_1)))))))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Adt_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Tuple0_cons()) in
(let _0_8s_1 == (_0_3s_0) in
(let _0_9s_1 == (_0_1s_0) in
(let _0_7s_1 == (Tuple_4_cons(_0_8s_1, _0_2s_0, _0_4s_0, _0_9s_1)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_7s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_7s_1 == (_1_2s_0) in
(let _1_6s_1 == (s_Bool_cons((s_Int_i32_val(_1_7s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))) in
(let _1_phi_0 == ((_1_6s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_9s_1 == (_1_2s_0) in
    (let _1_10s_1 == (Tuple_4_elem_0(_1_1s_0)) in
    s_Bool_cons((s_Int_i32_val(_1_9s_1)) <= (s_Int_i32_val(_1_10s_1)))))) in
(let _1_5s_3 == (_1_phi_0) in
(let _1_phi_1 == ((_1_5s_3) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_12s_1 == (_1_2s_0) in
    (let _1_13s_1 == (s_Adt_Vector_read_0(Tuple_4_elem_1(_1_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_1_12s_1)) < (s_Int_i32_val(_1_13s_1)))))) in
(let _1_4s_3 == (_1_phi_1) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_16s_1 == (Tuple_4_elem_2(_1_1s_0)) in
  (let _1_17s_1 == (_1_2s_0) in
  (let _1_15s_1 == (f_get(_1_16s_1, _1_17s_1)) in
  (let _1_19s_1 == (Tuple_4_elem_3(_1_1s_0)) in
  (let _1_21s_1 == (Tuple_4_elem_1(_1_1s_0)) in
  (let _1_22s_1 == (_1_2s_0) in
  (let _1_20s_1 == (f_get(_1_21s_1, _1_22s_1)) in
  (let _1_18s_1 == (f_do_transform(_1_19s_1, _1_20s_1)) in
  s_Bool_cons((_1_15s_1) == (_1_18s_1))))))))))
: s_Bool_cons(true)))))))))))))))))))))
{
label start
  var _4p: Ref
  inhale p_Adt_Vector(_4p)
  var _5p: Ref
  inhale p_Bool(_5p)
  var _6p: Ref
  inhale p_Int_i32(_6p)
  var _7p: Ref
  inhale p_Adt_ClampTransform(_7p)
  var _8p: Ref
  inhale p_Adt_Vector(_8p)
  var _9p: Ref
  inhale p_Int_i32(_9p)
  var _10p: Ref
  inhale p_Int_i32(_10p)
  var _11p: Ref
  inhale p_Tuple2_s_Int_i32_s_Bool(_11p)
  var _12p: Ref
  inhale p_Int_i32(_12p)
  var _13p: Ref
  inhale p_Adt_Vector(_13p)
  var _14p: Ref
  inhale p_Tuple2_s_Int_i32_s_Adt_Vector(_14p)
  var _15p: Ref
  inhale p_Adt_Vector(_15p)
  var _16p: Ref
  inhale p_Int_i32(_16p)
  var _17p: Ref
  inhale p_Int_i32(_17p)
  var _18p: Ref
  inhale p_Adt_ClampTransform(_18p)
  var _19p: Ref
  inhale p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_19p)
  var _20p: Ref
  inhale p_Adt_ClampTransform(_20p)
  var _21p: Ref
  inhale p_Int_i32(_21p)
  var _22p: Ref
  inhale p_Adt_Vector(_22p)
  var _23p: Ref
  inhale p_Adt_Vector(_23p)
  var _24p: Ref
  inhale p_Int_i32(_24p)
  var _25p: Ref
  inhale p_Int_i32(_25p)
  goto bb_0
label bb_0
  // _6 = _3
  reassign_p_Int_i32(_6p, p_Int_i32_snap(_3p))
  // _5 = Ge(move _6, const 1_i32)
  reassign_p_Bool(_5p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_6p))) >= (s_Int_i32_val(s_Int_i32_cons(1)))))
  if (p_Bool_snap(_5p) == s_Bool_cons(false)) { goto bb_4 }
  else { goto bb_1 }
label bb_1
  // _7 = _1
  reassign_p_Adt_ClampTransform(_7p, p_Adt_ClampTransform_snap(_1p))
  // _8 = move _2
  reassign_p_Adt_Vector(_8p, p_Adt_Vector_snap(_2p))
  // _10 = _3
  reassign_p_Int_i32(_10p, p_Int_i32_snap(_3p))
  // _11 = CheckedSub(_10, const 1_i32)
  reassign_p_Tuple2_s_Int_i32_s_Bool(_11p, mir_checkedbinop_sub_i32(p_Int_i32_snap(_10p), s_Int_i32_cons(1)))
  unfold p_Tuple2_s_Int_i32_s_Bool(_11p)
  if (s_Bool_val(p_Bool_snap(p_Tuple2_s_Int_i32_s_Bool_field_1(_11p))) == false) { goto bb_2 }
  else { goto bb_9 }
label bb_2
  // _9 = move (_11.0: i32)
  reassign_p_Int_i32(_9p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Bool_field_0(_11p)))
  m_apply_row_by_row_rec(_4p, _7p, _8p, _9p)
  goto bb_3
label bb_3
  goto bb_5
label bb_4
  // _4 = move _2
  reassign_p_Adt_Vector(_4p, p_Adt_Vector_snap(_2p))
  goto bb_5
label bb_5
  // FakeRead(ForLet(None), _4)
  // _15 = move _4
  reassign_p_Adt_Vector(_15p, p_Adt_Vector_snap(_4p))
  // _16 = _3
  reassign_p_Int_i32(_16p, p_Int_i32_snap(_3p))
  m_impure_get(_14p, _15p, _16p)
  goto bb_6
label bb_6
  // PlaceMention(_14)
  // _12 = (_14.0: i32)
  unfold p_Tuple2_s_Int_i32_s_Adt_Vector(_14p)
  reassign_p_Int_i32(_12p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(_14p)))
  // _13 = move (_14.1: Vector)
  reassign_p_Adt_Vector(_13p, p_Adt_Vector_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(_14p)))
  // _20 = _1
  reassign_p_Adt_ClampTransform(_20p, p_Adt_ClampTransform_snap(_1p))
  // _21 = _12
  reassign_p_Int_i32(_21p, p_Int_i32_snap(_12p))
  m_do_transform_impure(_19p, _20p, _21p)
  goto bb_7
label bb_7
  // PlaceMention(_19)
  // _17 = (_19.0: i32)
  unfold p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_19p)
  reassign_p_Int_i32(_17p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(_19p)))
  // _18 = (_19.1: ClampTransform)
  reassign_p_Adt_ClampTransform(_18p, p_Adt_ClampTransform_snap(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(_19p)))
  // _23 = move _13
  reassign_p_Adt_Vector(_23p, p_Adt_Vector_snap(_13p))
  // _24 = _3
  reassign_p_Int_i32(_24p, p_Int_i32_snap(_3p))
  // _25 = _17
  reassign_p_Int_i32(_25p, p_Int_i32_snap(_17p))
  m_set(_22p, _23p, _24p, _25p)
  goto bb_8
label bb_8
  // FakeRead(ForLet(None), _22)
  // _0 = move _22
  reassign_p_Adt_Vector(_0p, p_Adt_Vector_snap(_22p))
  goto end
label bb_9
  assert false // terminator resume
label end
  // return
}

method m_apply_row_by_row(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  requires p_Adt_ClampTransform(_1p)
  requires p_Adt_Vector(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_ClampTransform_snap(_1p)) in
(let _0_2s_0 == (p_Adt_Vector_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(_0_3s_0))) in
(let _0_7s_1 == (s_Adt_Vector_read_0(_0_2s_0)) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(_0_3s_0)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_7s_1) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_ClampTransform_snap(_1p))) in
(let _0_2s_0 == (old(p_Adt_Vector_snap(_2p))) in
(let _0_3s_0 == (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_0p)) in
(let _0_5s_1 == (s_Tuple0_cons()) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_6s_1 == (Tuple_3_cons(_0_2s_0, _0_3s_0, _0_7s_1)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_6s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_6s_1 == (_1_2s_0) in
(let _1_5s_1 == (s_Bool_cons((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(_1_6s_1)))) in // there _1_6s_1 was replaced with qvar_0_0
(let _1_phi_0 == ((_1_5s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_8s_1 == (_1_2s_0) in
    (let _1_9s_1 == (s_Adt_Vector_read_0(Tuple_3_elem_0(_1_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_1_8s_1)) < (s_Int_i32_val(_1_9s_1)))))) in
(let _1_4s_3 == (_1_phi_0) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_12s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(Tuple_3_elem_1(_1_1s_0))) in
  (let _1_13s_1 == (_1_2s_0) in
  (let _1_11s_1 == (f_get(_1_12s_1, _1_13s_1)) in
  (let _1_15s_1 == (Tuple_3_elem_2(_1_1s_0)) in
  (let _1_17s_1 == (Tuple_3_elem_0(_1_1s_0)) in
  (let _1_18s_1 == (_1_2s_0) in
  (let _1_16s_1 == (f_get(_1_17s_1, _1_18s_1)) in
  (let _1_14s_1 == (f_do_transform(_1_15s_1, _1_16s_1)) in
  s_Bool_cons((_1_11s_1) == (_1_14s_1))))))))))
: s_Bool_cons(true)))))))))))))))))
{
label start
  var _3p: Ref
  inhale p_Tuple0(_3p)
  var _4p: Ref
  inhale p_Bool(_4p)
  var _5p: Ref
  inhale p_Int_i32(_5p)
  var _6p: Ref
  inhale p_Never(_6p)
  var _7p: Ref
  inhale p_Adt_Vector(_7p)
  var _8p: Ref
  inhale p_Adt_ClampTransform(_8p)
  var _9p: Ref
  inhale p_Int_i32(_9p)
  var _10p: Ref
  inhale p_Adt_Vector(_10p)
  var _11p: Ref
  inhale p_Adt_ClampTransform(_11p)
  var _12p: Ref
  inhale p_Adt_Vector(_12p)
  var _13p: Ref
  inhale p_Int_i32(_13p)
  var _14p: Ref
  inhale p_Int_i32(_14p)
  var _15p: Ref
  inhale p_Tuple2_s_Int_i32_s_Bool(_15p)
  var _16p: Ref
  inhale p_Adt_ClampTransform(_16p)
  goto bb_0
label bb_0
  // _5 = (_2.0: i32)
  unfold p_Adt_Vector(_2p)
  reassign_p_Int_i32(_5p, p_Int_i32_snap(p_Adt_Vector_field_0(_2p)))
  // _4 = Le(move _5, const 0_i32)
  reassign_p_Bool(_4p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_5p))) <= (s_Int_i32_val(s_Int_i32_cons(0)))))
  if (p_Bool_snap(_4p) == s_Bool_cons(false)) { goto bb_2 }
  else { goto bb_1 }
label bb_1
  // _7 = move _2
  fold p_Adt_Vector(_2p)
  reassign_p_Adt_Vector(_7p, p_Adt_Vector_snap(_2p))
  // _8 = _1
  reassign_p_Adt_ClampTransform(_8p, p_Adt_ClampTransform_snap(_1p))
  // _0 = (move _7, move _8)
  unfold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  reassign_p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(_0p), p_Adt_Vector_snap(_7p))
  reassign_p_Adt_ClampTransform(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(_0p), p_Adt_ClampTransform_snap(_8p))
  fold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  goto bb_5
label bb_2
  // _3 = const ()
  reassign_p_Tuple0(_3p, s_Tuple0_cons())
  // _9 = (_2.0: i32)
  reassign_p_Int_i32(_9p, p_Int_i32_snap(p_Adt_Vector_field_0(_2p)))
  // FakeRead(ForLet(None), _9)
  // _11 = _1
  reassign_p_Adt_ClampTransform(_11p, p_Adt_ClampTransform_snap(_1p))
  // _12 = move _2
  fold p_Adt_Vector(_2p)
  reassign_p_Adt_Vector(_12p, p_Adt_Vector_snap(_2p))
  // _14 = _9
  reassign_p_Int_i32(_14p, p_Int_i32_snap(_9p))
  // _15 = CheckedSub(_14, const 1_i32)
  reassign_p_Tuple2_s_Int_i32_s_Bool(_15p, mir_checkedbinop_sub_i32(p_Int_i32_snap(_14p), s_Int_i32_cons(1)))
  unfold p_Tuple2_s_Int_i32_s_Bool(_15p)
  if (s_Bool_val(p_Bool_snap(p_Tuple2_s_Int_i32_s_Bool_field_1(_15p))) == false) { goto bb_3 }
  else { goto bb_6 }
label bb_3
  // _13 = move (_15.0: i32)
  reassign_p_Int_i32(_13p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Bool_field_0(_15p)))
  m_apply_row_by_row_rec(_10p, _11p, _12p, _13p)
  goto bb_4
label bb_4
  // _16 = _1
  reassign_p_Adt_ClampTransform(_16p, p_Adt_ClampTransform_snap(_1p))
  // _0 = (move _10, move _16)
  unfold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  reassign_p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(_0p), p_Adt_Vector_snap(_10p))
  reassign_p_Adt_ClampTransform(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(_0p), p_Adt_ClampTransform_snap(_16p))
  fold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_0p)
  goto bb_5
label bb_5
  goto end
label bb_6
  assert false // terminator resume
label end
  // return
}

method m_assert_geq_0(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Int_i32(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Int_i32_snap(_1p)) in
(let _0_3s_1 == (_0_1s_0) in
s_Bool_cons((s_Int_i32_val(_0_3s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0)))))))
  ensures p_Tuple0(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label end
  // return
}

method m_max(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Int_i32(_0p)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  ensures p_Int_i32(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
label start
  var _3p: Ref
  inhale p_Bool(_3p)
  var _4p: Ref
  inhale p_Int_i32(_4p)
  var _5p: Ref
  inhale p_Int_i32(_5p)
  goto bb_0
label bb_0
  // _4 = _1
  reassign_p_Int_i32(_4p, p_Int_i32_snap(_1p))
  // _5 = _2
  reassign_p_Int_i32(_5p, p_Int_i32_snap(_2p))
  // _3 = Gt(move _4, move _5)
  reassign_p_Bool(_3p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_4p))) > (s_Int_i32_val(p_Int_i32_snap(_5p)))))
  if (p_Bool_snap(_3p) == s_Bool_cons(false)) { goto bb_2 }
  else { goto bb_1 }
label bb_1
  // _0 = _1
  reassign_p_Int_i32(_0p, p_Int_i32_snap(_1p))
  goto bb_3
label bb_2
  // _0 = _2
  reassign_p_Int_i32(_0p, p_Int_i32_snap(_2p))
  goto bb_3
label bb_3
  goto end
label end
  // return
}

method m_min(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Int_i32(_0p)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  ensures p_Int_i32(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Int_i32_snap(_1p))) in
(let _0_2s_0 == (old(p_Int_i32_snap(_2p))) in
(let _0_3s_0 == (p_Int_i32_snap(_0p)) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
label start
  var _3p: Ref
  inhale p_Bool(_3p)
  var _4p: Ref
  inhale p_Int_i32(_4p)
  var _5p: Ref
  inhale p_Int_i32(_5p)
  goto bb_0
label bb_0
  // _4 = _1
  reassign_p_Int_i32(_4p, p_Int_i32_snap(_1p))
  // _5 = _2
  reassign_p_Int_i32(_5p, p_Int_i32_snap(_2p))
  // _3 = Ge(move _4, move _5)
  reassign_p_Bool(_3p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_4p))) >= (s_Int_i32_val(p_Int_i32_snap(_5p)))))
  if (p_Bool_snap(_3p) == s_Bool_cons(false)) { goto bb_2 }
  else { goto bb_1 }
label bb_1
  // _0 = _2
  reassign_p_Int_i32(_0p, p_Int_i32_snap(_2p))
  goto bb_3
label bb_2
  // _0 = _1
  reassign_p_Int_i32(_0p, p_Int_i32_snap(_1p))
  goto bb_3
label bb_3
  goto end
label end
  // return
}

method m_assert_true(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Bool(_1p)
  requires s_Bool_val(p_Bool_snap(_1p))
  ensures p_Tuple0(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label end
  // return
}

method m_assert_eq(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Int_i32_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
s_Bool_cons((_0_4s_1) == (_0_5s_1)))))))
  ensures p_Tuple0(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label end
  // return
}

method m_vector_client(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((_0_3s_1) == (s_Int_i32_cons(10))))))
  ensures p_Tuple0(_0p)
{
label start
  var _2p: Ref
  inhale p_Adt_Vector(_2p)
  var _3p: Ref
  inhale p_Adt_Vector(_3p)
  var _4p: Ref
  inhale p_Int_i32(_4p)
  var _5p: Ref
  inhale p_Adt_Vector(_5p)
  var _6p: Ref
  inhale p_Tuple0(_6p)
  var _7p: Ref
  inhale p_Int_i32(_7p)
  goto bb_0
label bb_0
  // _3 = move _1
  reassign_p_Adt_Vector(_3p, p_Adt_Vector_snap(_1p))
  var _tmp0: Ref
  assign_p_Int_i32(_tmp0, s_Int_i32_cons(5))
  var _tmp1: Ref
  assign_p_Int_i32(_tmp1, s_Int_i32_cons(42))
  m_set(_2p, _3p, _tmp0, _tmp1)
  goto bb_1
label bb_1
  // FakeRead(ForLet(None), _2)
  // _5 = move _2
  reassign_p_Adt_Vector(_5p, p_Adt_Vector_snap(_2p))
  var _tmp2: Ref
  assign_p_Int_i32(_tmp2, s_Int_i32_cons(5))
  reassign_p_Int_i32(_4p, f_get(p_Adt_Vector_snap(_5p), p_Int_i32_snap(_tmp2)))
  goto bb_2
label bb_2
  // FakeRead(ForLet(None), _4)
  // _7 = _4
  reassign_p_Int_i32(_7p, p_Int_i32_snap(_4p))
  var _tmp3: Ref
  assign_p_Int_i32(_tmp3, s_Int_i32_cons(42))
  m_assert_eq(_6p, _7p, _tmp3)
  goto bb_3
label bb_3
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label bb_4
  assert false // terminator resume
label end
  // return
}

method m_between(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref,
  _3p: Ref
)
  requires p_Bool(_0p)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  requires p_Int_i32(_3p)
  ensures p_Bool(_0p)
{
label start
  var _4p: Ref
  inhale p_Bool(_4p)
  var _5p: Ref
  inhale p_Int_i32(_5p)
  var _6p: Ref
  inhale p_Int_i32(_6p)
  var _7p: Ref
  inhale p_Bool(_7p)
  var _8p: Ref
  inhale p_Int_i32(_8p)
  var _9p: Ref
  inhale p_Int_i32(_9p)
  goto bb_0
label bb_0
  // _5 = _1
  reassign_p_Int_i32(_5p, p_Int_i32_snap(_1p))
  // _6 = _3
  reassign_p_Int_i32(_6p, p_Int_i32_snap(_3p))
  // _4 = Le(move _5, move _6)
  reassign_p_Bool(_4p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_5p))) <= (s_Int_i32_val(p_Int_i32_snap(_6p)))))
  if (p_Bool_snap(_4p) == s_Bool_cons(false)) { goto bb_1 }
  else { goto bb_2 }
label bb_1
  // _0 = const false
  reassign_p_Bool(_0p, s_Bool_cons(false))
  goto bb_3
label bb_2
  // _8 = _1
  reassign_p_Int_i32(_8p, p_Int_i32_snap(_1p))
  // _9 = _2
  reassign_p_Int_i32(_9p, p_Int_i32_snap(_2p))
  // _7 = Ge(move _8, move _9)
  reassign_p_Bool(_7p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_8p))) >= (s_Int_i32_val(p_Int_i32_snap(_9p)))))
  // _0 = move _7
  reassign_p_Bool(_0p, p_Bool_snap(_7p))
  goto bb_3
label bb_3
  goto end
label end
  // return
}

method m_final_assert(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Tuple0_cons()) in
(let _0_4s_1 == (_0_1s_0) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((let _1_1s_0 == (_0_4s_1) in
(let _1_2s_0 == (qvar_0_0) in
(let _1_6s_1 == (_1_2s_0) in
(let _1_5s_1 == (s_Bool_cons((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(_1_6s_1)))) in
(let _1_phi_0 == ((_1_5s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _1_8s_1 == (_1_2s_0) in
    (let _1_9s_1 == (s_Adt_Vector_read_0(_1_1s_0)) in
    s_Bool_cons((s_Int_i32_val(_1_8s_1)) < (s_Int_i32_val(_1_9s_1)))))) in
(let _1_4s_3 == (_1_phi_0) in
(let _1_3s_1 == (s_Bool_cons(!(s_Bool_val(_1_4s_3)))) in
(_1_3s_1) == (s_Bool_cons(false))
? (let _1_12s_1 == (_1_1s_0) in
  (let _1_13s_1 == (_1_2s_0) in
  (let _1_11s_1 == (f_get(_1_12s_1, _1_13s_1)) in
  f_between(_1_11s_1, s_Int_i32_cons(100), s_Int_i32_cons(200)))))
: s_Bool_cons(true))))))))))))))
  ensures p_Tuple0(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label end
  // return
}

method m_make_clamp(
  _0p: Ref,
  _1p: Ref
)
  requires p_Adt_ClampTransform(_0p)
  requires p_Adt_Bounds(_1p)
  ensures p_Adt_ClampTransform(_0p)
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Bounds_snap(_1p))) in
(let _0_2s_0 == (p_Adt_ClampTransform_snap(_0p)) in
(let _0_4s_1 == (s_Adt_ClampTransform_read_0(_0_2s_0)) in
(let _0_6s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_6s_1) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))))
{
label start
  var _2p: Ref
  inhale p_Adt_Bounds(_2p)
  goto bb_0
label bb_0
  // _2 = _1
  reassign_p_Adt_Bounds(_2p, p_Adt_Bounds_snap(_1p))
  // _0 = ClampTransform { bounds: move _2 }
  unfold p_Adt_ClampTransform(_0p)
  reassign_p_Adt_Bounds(p_Adt_ClampTransform_field_0(_0p), p_Adt_Bounds_snap(_2p))
  fold p_Adt_ClampTransform(_0p)
  goto end
label end
  // return
}

method m_client(
  _0p: Ref,
  _1p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_3s_1)) >= (s_Int_i32_val(s_Int_i32_cons(10)))))))
  ensures p_Tuple0(_0p)
{
label start
  var _2p: Ref
  inhale p_Adt_ClampTransform(_2p)
  var _3p: Ref
  inhale p_Adt_Bounds(_3p)
  var _4p: Ref
  inhale p_Adt_Vector(_4p)
  var _5p: Ref
  inhale p_Adt_ClampTransform(_5p)
  var _6p: Ref
  inhale p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_6p)
  var _7p: Ref
  inhale p_Adt_ClampTransform(_7p)
  var _8p: Ref
  inhale p_Adt_Vector(_8p)
  var _9p: Ref
  inhale p_Int_i32(_9p)
  var _10p: Ref
  inhale p_Adt_Vector(_10p)
  var _11p: Ref
  inhale p_Tuple2_s_Int_i32_s_Adt_Vector(_11p)
  var _12p: Ref
  inhale p_Adt_Vector(_12p)
  var _13p: Ref
  inhale p_Tuple0(_13p)
  var _14p: Ref
  inhale p_Bool(_14p)
  var _15p: Ref
  inhale p_Int_i32(_15p)
  var _16p: Ref
  inhale p_Int_i32(_16p)
  var _17p: Ref
  inhale p_Tuple0(_17p)
  var _18p: Ref
  inhale p_Adt_Vector(_18p)
  goto bb_0
label bb_0
  // _3 = Bounds { upper: const 200_i32, lower: const 100_i32 }
  unfold p_Adt_Bounds(_3p)
  reassign_p_Int_i32(p_Adt_Bounds_field_0(_3p), s_Int_i32_cons(200))
  reassign_p_Int_i32(p_Adt_Bounds_field_1(_3p), s_Int_i32_cons(100))
  fold p_Adt_Bounds(_3p)
  m_make_clamp(_2p, _3p)
  goto bb_1
label bb_1
  // FakeRead(ForLet(None), _2)
  // _7 = _2
  reassign_p_Adt_ClampTransform(_7p, p_Adt_ClampTransform_snap(_2p))
  // _8 = move _1
  reassign_p_Adt_Vector(_8p, p_Adt_Vector_snap(_1p))
  m_apply_row_by_row(_6p, _7p, _8p)
  goto bb_2
label bb_2
  // PlaceMention(_6)
  // _4 = move (_6.0: Vector)
  unfold p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_6p)
  reassign_p_Adt_Vector(_4p, p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(_6p)))
  // _5 = (_6.1: ClampTransform)
  reassign_p_Adt_ClampTransform(_5p, p_Adt_ClampTransform_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(_6p)))
  // _12 = move _4
  reassign_p_Adt_Vector(_12p, p_Adt_Vector_snap(_4p))
  var _tmp0: Ref
  assign_p_Int_i32(_tmp0, s_Int_i32_cons(3))
  m_impure_get(_11p, _12p, _tmp0)
  goto bb_3
label bb_3
  // PlaceMention(_11)
  // _9 = (_11.0: i32)
  unfold p_Tuple2_s_Int_i32_s_Adt_Vector(_11p)
  reassign_p_Int_i32(_9p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(_11p)))
  // _10 = move (_11.1: Vector)
  reassign_p_Adt_Vector(_10p, p_Adt_Vector_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(_11p)))
  // _15 = _9
  reassign_p_Int_i32(_15p, p_Int_i32_snap(_9p))
  // _16 = ((_5.0: Bounds).0: i32)
  unfold p_Adt_ClampTransform(_5p)
  unfold p_Adt_Bounds(p_Adt_ClampTransform_field_0(_5p))
  reassign_p_Int_i32(_16p, p_Int_i32_snap(p_Adt_Bounds_field_0(p_Adt_ClampTransform_field_0(_5p))))
  // _14 = Le(move _15, move _16)
  reassign_p_Bool(_14p, s_Bool_cons((s_Int_i32_val(p_Int_i32_snap(_15p))) <= (s_Int_i32_val(p_Int_i32_snap(_16p)))))
  m_assert_true(_13p, _14p)
  goto bb_4
label bb_4
  // _18 = move _10
  reassign_p_Adt_Vector(_18p, p_Adt_Vector_snap(_10p))
  m_final_assert(_17p, _18p)
  goto bb_5
label bb_5
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label bb_6
  assert false // terminator resume
label end
  // return
}

method m_clone_client(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Tuple0(_0p)
  requires p_Adt_Vector(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_4s_1 == (s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))) in
(_0_4s_1) == (s_Bool_cons(false))
? s_Bool_cons(false)
: (let _0_7s_1 == (_0_2s_0) in
  (let _0_8s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
  s_Bool_cons((s_Int_i32_val(_0_7s_1)) < (s_Int_i32_val(_0_8s_1))))))))))
  ensures p_Tuple0(_0p)
{
label start
  var _3p: Ref
  inhale p_Adt_Vector(_3p)
  var _4p: Ref
  inhale p_Adt_Vector(_4p)
  var _5p: Ref
  inhale p_Tuple2_s_Adt_Vector_s_Adt_Vector(_5p)
  var _6p: Ref
  inhale p_Adt_Vector(_6p)
  var _7p: Ref
  inhale p_Int_i32(_7p)
  var _8p: Ref
  inhale p_Tuple2_s_Int_i32_s_Adt_Vector(_8p)
  var _9p: Ref
  inhale p_Adt_Vector(_9p)
  var _10p: Ref
  inhale p_Int_i32(_10p)
  var _11p: Ref
  inhale p_Int_i32(_11p)
  var _12p: Ref
  inhale p_Tuple2_s_Int_i32_s_Adt_Vector(_12p)
  var _13p: Ref
  inhale p_Adt_Vector(_13p)
  var _14p: Ref
  inhale p_Int_i32(_14p)
  goto bb_0
label bb_0
  // _6 = move _1
  reassign_p_Adt_Vector(_6p, p_Adt_Vector_snap(_1p))
  reassign_p_Tuple2_s_Adt_Vector_s_Adt_Vector(_5p, f_clone(p_Adt_Vector_snap(_6p)))
  goto bb_1
label bb_1
  // PlaceMention(_5)
  // _3 = move (_5.0: Vector)
  unfold p_Tuple2_s_Adt_Vector_s_Adt_Vector(_5p)
  reassign_p_Adt_Vector(_3p, p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_0(_5p)))
  // _4 = move (_5.1: Vector)
  reassign_p_Adt_Vector(_4p, p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_1(_5p)))
  // _9 = move _3
  reassign_p_Adt_Vector(_9p, p_Adt_Vector_snap(_3p))
  // _10 = _2
  reassign_p_Int_i32(_10p, p_Int_i32_snap(_2p))
  m_impure_get(_8p, _9p, _10p)
  goto bb_2
label bb_2
  // _7 = (_8.0: i32)
  unfold p_Tuple2_s_Int_i32_s_Adt_Vector(_8p)
  reassign_p_Int_i32(_7p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(_8p)))
  // _13 = move _4
  reassign_p_Adt_Vector(_13p, p_Adt_Vector_snap(_4p))
  // _14 = _2
  reassign_p_Int_i32(_14p, p_Int_i32_snap(_2p))
  m_impure_get(_12p, _13p, _14p)
  goto bb_3
label bb_3
  // _11 = (_12.0: i32)
  unfold p_Tuple2_s_Int_i32_s_Adt_Vector(_12p)
  reassign_p_Int_i32(_11p, p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(_12p)))
  m_assert_eq(_0p, _7p, _11p)
  goto bb_4
label bb_4
  goto end
label bb_5
  assert false // terminator resume
label end
  // return
}

method m_main(
  _0p: Ref
)
  requires p_Tuple0(_0p)
  ensures p_Tuple0(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  reassign_p_Tuple0(_0p, s_Tuple0_cons())
  goto end
label end
  // return
}

// -----------------------------
// functions
// -----------------------------
function f_get(
  _1p: s_Adt_Vector,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))))))

function f_between(
  _1p: s_Int_i32,
  _2p: s_Int_i32,
  _3p: s_Int_i32
): s_Bool
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (_3p) in
(let _0_5s_1 == (_0_1s_0) in
(let _0_6s_1 == (_0_3s_0) in
(let _0_4s_1 == (s_Bool_cons((s_Int_i32_val(_0_5s_1)) <= (s_Int_i32_val(_0_6s_1)))) in
(_0_4s_1) == (s_Bool_cons(false))
? s_Bool_cons(false)
: (let _0_8s_1 == (_0_1s_0) in
  (let _0_9s_1 == (_0_2s_0) in
  s_Bool_cons((s_Int_i32_val(_0_8s_1)) >= (s_Int_i32_val(_0_9s_1)))))))))))
}

function f_min(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(_0_5s_1)))) in
(_0_3s_1) == (s_Bool_cons(false))
? _0_1s_0
: _0_2s_0)))))
}

function f_max(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_1s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) >= (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_12s_1 == (_0_2s_0) in
  (let _0_11s_1 == (_0_12s_1) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1)))))
: s_Bool_cons(true)))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) > (s_Int_i32_val(_0_5s_1)))) in
(_0_3s_1) == (s_Bool_cons(false))
? _0_2s_0
: _0_1s_0)))))
}

function f_do_transform(
  _1p: s_Adt_ClampTransform,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) < (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_11s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_10s_1 == (_0_3s_0) in
  (let _0_11s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
  s_Bool_cons((_0_10s_1) == (_0_11s_1))))
: s_Bool_cons(true)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_9s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_7s_1 == (s_Bool_cons((s_Int_i32_val(_0_8s_1)) >= (s_Int_i32_val(_0_9s_1)))) in
(let _0_phi_0 == ((_0_7s_1) == (s_Bool_cons(false))
  ? s_Bool_cons(false)
  : (let _0_11s_1 == (_0_2s_0) in
    (let _0_12s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
    s_Bool_cons((s_Int_i32_val(_0_11s_1)) <= (s_Int_i32_val(_0_12s_1)))))) in
(let _0_6s_3 == (_0_phi_0) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_3)))) in
(_0_5s_1) == (s_Bool_cons(false))
? (let _0_14s_1 == (_0_3s_0) in
  (let _0_15s_1 == (_0_2s_0) in
  s_Bool_cons((_0_14s_1) == (_0_15s_1))))
: s_Bool_cons(true)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) <= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
s_Bool_cons((s_Int_i32_val(_0_5s_1)) >= (s_Int_i32_val(_0_6s_1)))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_5s_1 == (_0_3s_0) in
(let _0_6s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_7s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
f_between(_0_5s_1, _0_6s_1, _0_7s_1))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_1 == (s_Adt_Bounds_read_1(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_5s_1 == (s_Adt_Bounds_read_0(s_Adt_ClampTransform_read_0(_0_1s_0))) in
(let _0_6s_1 == (_0_2s_0) in
(let _0_4s_1 == (f_min(_0_5s_1, _0_6s_1)) in
f_max(_0_3s_1, _0_4s_1)))))))
}

function f_clone(
  _1p: s_Adt_Vector
): s_Tuple2_s_Adt_Vector_s_Adt_Vector
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_3s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
s_Bool_cons((s_Int_i32_val(_0_3s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0)))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (result) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(_0_2s_0)) in
(let _0_5s_1 == (_0_6s_1) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (result) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(_0_2s_0)) in
(let _0_5s_1 == (_0_6s_1) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))))

// -----------------------------
// MIR builtins
// -----------------------------
function mir_checkedbinop_sub_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Tuple2_s_Int_i32_s_Bool
{
  s_Tuple2_s_Int_i32_s_Bool_cons(s_Int_i32_cons((s_Int_i32_val(arg1)) - (s_Int_i32_val(arg2))), s_Bool_cons(false))
}

// -----------------------------
// generics
// -----------------------------
// -----------------------------
// types
// -----------------------------
field f_s_Int_i32: s_Int_i32
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  axiom ax_inverse_s_Int_i32_cons_s_Int_i32_val {
    forall val: s_Int_i32 :: {s_Int_i32_val(val)} (s_Int_i32_cons(s_Int_i32_val(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}

function s_Int_i32_unreachable(
): s_Int_i32
  requires false

function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires p_Int_i32(self)
{
  unfolding p_Int_i32(self) in (self.f_s_Int_i32)
}

predicate p_Int_i32(self_p: Ref) {
  acc(self_p.f_s_Int_i32)
}

method assign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

method reassign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  requires p_Int_i32(_p)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

domain s_Adt_Vector {
  axiom ax_s_Adt_Vector_write_0_read_0 {
    forall self: s_Adt_Vector, val: s_Int_i32 :: {s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))} (s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32 :: {s_Adt_Vector_cons(f0)} (s_Adt_Vector_read_0(s_Adt_Vector_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_Vector_cons {
    forall self: s_Adt_Vector :: {s_Adt_Vector_cons(s_Adt_Vector_read_0(self))} (s_Adt_Vector_cons(s_Adt_Vector_read_0(self))) == (self)
  }
  function s_Adt_Vector_cons(s_Int_i32): s_Adt_Vector
  function s_Adt_Vector_read_0(s_Adt_Vector): s_Int_i32
  function s_Adt_Vector_write_0(s_Adt_Vector, s_Int_i32): s_Adt_Vector
}

function p_Adt_Vector_field_0(
  self: Ref
): Ref
function s_Adt_Vector_unreachable(
): s_Adt_Vector
  requires false

function p_Adt_Vector_snap(
  self_p: Ref
): s_Adt_Vector
  requires p_Adt_Vector(self_p)
{
  unfolding p_Adt_Vector(self_p) in (s_Adt_Vector_cons(p_Int_i32_snap(p_Adt_Vector_field_0(self_p))))
}

predicate p_Adt_Vector(self_p: Ref) {
  p_Int_i32(p_Adt_Vector_field_0(self_p))
}

method assign_p_Adt_Vector(
  _p: Ref,
  _s_new: s_Adt_Vector
)
  ensures p_Adt_Vector(_p)
  ensures (p_Adt_Vector_snap(_p)) == (_s_new)

method reassign_p_Adt_Vector(
  _p: Ref,
  _s_new: s_Adt_Vector
)
  requires p_Adt_Vector(_p)
  ensures p_Adt_Vector(_p)
  ensures (p_Adt_Vector_snap(_p)) == (_s_new)

domain s_Adt_Bounds {
  axiom ax_s_Adt_Bounds_write_0_read_0 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_0(s_Adt_Bounds_write_0(self, val))} (s_Adt_Bounds_read_0(s_Adt_Bounds_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Bounds_write_0_read_1 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_1(s_Adt_Bounds_write_0(self, val))} (s_Adt_Bounds_read_1(s_Adt_Bounds_write_0(self, val))) == (s_Adt_Bounds_read_1(self))
  }
  axiom ax_s_Adt_Bounds_write_1_read_0 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_0(s_Adt_Bounds_write_1(self, val))} (s_Adt_Bounds_read_0(s_Adt_Bounds_write_1(self, val))) == (s_Adt_Bounds_read_0(self))
  }
  axiom ax_s_Adt_Bounds_write_1_read_1 {
    forall self: s_Adt_Bounds, val: s_Int_i32 :: {s_Adt_Bounds_read_1(s_Adt_Bounds_write_1(self, val))} (s_Adt_Bounds_read_1(s_Adt_Bounds_write_1(self, val))) == (val)
  }
  axiom ax_s_Adt_Bounds_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Adt_Bounds_cons(f0, f1)} (s_Adt_Bounds_read_0(s_Adt_Bounds_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Adt_Bounds_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Int_i32 :: {s_Adt_Bounds_cons(f0, f1)} (s_Adt_Bounds_read_1(s_Adt_Bounds_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Adt_Bounds_cons {
    forall self: s_Adt_Bounds :: {s_Adt_Bounds_cons(s_Adt_Bounds_read_0(self), s_Adt_Bounds_read_1(self))} (s_Adt_Bounds_cons(s_Adt_Bounds_read_0(self), s_Adt_Bounds_read_1(self))) == (self)
  }
  function s_Adt_Bounds_cons(s_Int_i32, s_Int_i32): s_Adt_Bounds
  function s_Adt_Bounds_read_0(s_Adt_Bounds): s_Int_i32
  function s_Adt_Bounds_write_0(s_Adt_Bounds, s_Int_i32): s_Adt_Bounds
  function s_Adt_Bounds_read_1(s_Adt_Bounds): s_Int_i32
  function s_Adt_Bounds_write_1(s_Adt_Bounds, s_Int_i32): s_Adt_Bounds
}

function p_Adt_Bounds_field_0(
  self: Ref
): Ref
function p_Adt_Bounds_field_1(
  self: Ref
): Ref
function s_Adt_Bounds_unreachable(
): s_Adt_Bounds
  requires false

function p_Adt_Bounds_snap(
  self_p: Ref
): s_Adt_Bounds
  requires p_Adt_Bounds(self_p)
{
  unfolding p_Adt_Bounds(self_p) in (s_Adt_Bounds_cons(p_Int_i32_snap(p_Adt_Bounds_field_0(self_p)), p_Int_i32_snap(p_Adt_Bounds_field_1(self_p))))
}

predicate p_Adt_Bounds(self_p: Ref) {
  (p_Int_i32(p_Adt_Bounds_field_0(self_p))) && (p_Int_i32(p_Adt_Bounds_field_1(self_p)))
}

method assign_p_Adt_Bounds(
  _p: Ref,
  _s_new: s_Adt_Bounds
)
  ensures p_Adt_Bounds(_p)
  ensures (p_Adt_Bounds_snap(_p)) == (_s_new)

method reassign_p_Adt_Bounds(
  _p: Ref,
  _s_new: s_Adt_Bounds
)
  requires p_Adt_Bounds(_p)
  ensures p_Adt_Bounds(_p)
  ensures (p_Adt_Bounds_snap(_p)) == (_s_new)

domain s_Adt_ClampTransform {
  axiom ax_s_Adt_ClampTransform_write_0_read_0 {
    forall self: s_Adt_ClampTransform, val: s_Adt_Bounds :: {s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_write_0(self, val))} (s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_ClampTransform_cons_read_0 {
    forall f0: s_Adt_Bounds :: {s_Adt_ClampTransform_cons(f0)} (s_Adt_ClampTransform_read_0(s_Adt_ClampTransform_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_ClampTransform_cons {
    forall self: s_Adt_ClampTransform :: {s_Adt_ClampTransform_cons(s_Adt_ClampTransform_read_0(self))} (s_Adt_ClampTransform_cons(s_Adt_ClampTransform_read_0(self))) == (self)
  }
  function s_Adt_ClampTransform_cons(s_Adt_Bounds): s_Adt_ClampTransform
  function s_Adt_ClampTransform_read_0(s_Adt_ClampTransform): s_Adt_Bounds
  function s_Adt_ClampTransform_write_0(s_Adt_ClampTransform, s_Adt_Bounds): s_Adt_ClampTransform
}

function p_Adt_ClampTransform_field_0(
  self: Ref
): Ref
function s_Adt_ClampTransform_unreachable(
): s_Adt_ClampTransform
  requires false

function p_Adt_ClampTransform_snap(
  self_p: Ref
): s_Adt_ClampTransform
  requires p_Adt_ClampTransform(self_p)
{
  unfolding p_Adt_ClampTransform(self_p) in (s_Adt_ClampTransform_cons(p_Adt_Bounds_snap(p_Adt_ClampTransform_field_0(self_p))))
}

predicate p_Adt_ClampTransform(self_p: Ref) {
  p_Adt_Bounds(p_Adt_ClampTransform_field_0(self_p))
}

method assign_p_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Adt_ClampTransform
)
  ensures p_Adt_ClampTransform(_p)
  ensures (p_Adt_ClampTransform_snap(_p)) == (_s_new)

method reassign_p_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Adt_ClampTransform
)
  requires p_Adt_ClampTransform(_p)
  ensures p_Adt_ClampTransform(_p)
  ensures (p_Adt_ClampTransform_snap(_p)) == (_s_new)

domain s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform {
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons_read_0 {
    forall f0: s_Adt_Vector, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons_read_1 {
    forall f0: s_Adt_Vector, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform :: {s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))} (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(self))) == (self)
  }
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(s_Adt_Vector, s_Adt_ClampTransform): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform): s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_0(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, s_Adt_Vector): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_read_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform): s_Adt_ClampTransform
  function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_write_1(s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform, s_Adt_ClampTransform): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
}

function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_unreachable(
): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  requires false

function p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(
  self_p: Ref
): s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p)
{
  unfolding p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p) in (s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_cons(p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(self_p)), p_Adt_ClampTransform_snap(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(self_p))))
}

predicate p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(self_p: Ref) {
  (p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_0(self_p))) && (p_Adt_ClampTransform(p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_field_1(self_p)))
}

method assign_p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_ClampTransform
)
  requires p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_ClampTransform_snap(_p)) == (_s_new)

field f_Tuple0: s_Tuple0
domain s_Tuple0 {
  function s_Tuple0_cons(): s_Tuple0
}

function s_Tuple0_unreachable(
): s_Tuple0
  requires false

function p_Tuple0_snap(
  self: Ref
): s_Tuple0
  requires p_Tuple0(self)

predicate p_Tuple0(self_p: Ref)

method assign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

method reassign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  requires p_Tuple0(_p)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

field f_Bool: s_Bool
domain s_Bool {
  axiom ax_inverse_s_Bool_val_s_Bool_cons {
    forall val: Bool :: {s_Bool_cons(val)} (s_Bool_val(s_Bool_cons(val))) == (val)
  }
  axiom ax_inverse_s_Bool_cons_s_Bool_val {
    forall val: s_Bool :: {s_Bool_val(val)} (s_Bool_cons(s_Bool_val(val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_val(s_Bool): Bool
}

function s_Bool_unreachable(
): s_Bool
  requires false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires p_Bool(self)
{
  unfolding p_Bool(self) in (self.f_Bool)
}

predicate p_Bool(self_p: Ref) {
  acc(self_p.f_Bool)
}

method assign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)

method reassign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  requires p_Bool(_p)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)

field f_Never: s_Never
domain s_Never {
}

function s_Never_unreachable(
): s_Never
  requires false

function p_Never_snap(
  self: Ref
): s_Never
  requires p_Never(self)

predicate p_Never(self_p: Ref)

method assign_p_Never(
  _p: Ref,
  _s_new: s_Never
)
  ensures p_Never(_p)
  ensures (p_Never_snap(_p)) == (_s_new)

method reassign_p_Never(
  _p: Ref,
  _s_new: s_Never
)
  requires p_Never(_p)
  ensures p_Never(_p)
  ensures (p_Never_snap(_p)) == (_s_new)

domain s_Tuple2_s_Int_i32_s_Bool {
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_write_0_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Bool, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_write_0_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Bool, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool_write_0(self, val))) == (s_Tuple2_s_Int_i32_s_Bool_read_1(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_write_1_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Bool, val: s_Bool :: {s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool_write_1(self, val))) == (s_Tuple2_s_Int_i32_s_Bool_read_0(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_write_1_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Bool, val: s_Bool :: {s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Bool :: {s_Tuple2_s_Int_i32_s_Bool_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Bool :: {s_Tuple2_s_Int_i32_s_Bool_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Bool_cons {
    forall self: s_Tuple2_s_Int_i32_s_Bool :: {s_Tuple2_s_Int_i32_s_Bool_cons(s_Tuple2_s_Int_i32_s_Bool_read_0(self), s_Tuple2_s_Int_i32_s_Bool_read_1(self))} (s_Tuple2_s_Int_i32_s_Bool_cons(s_Tuple2_s_Int_i32_s_Bool_read_0(self), s_Tuple2_s_Int_i32_s_Bool_read_1(self))) == (self)
  }
  function s_Tuple2_s_Int_i32_s_Bool_cons(s_Int_i32, s_Bool): s_Tuple2_s_Int_i32_s_Bool
  function s_Tuple2_s_Int_i32_s_Bool_read_0(s_Tuple2_s_Int_i32_s_Bool): s_Int_i32
  function s_Tuple2_s_Int_i32_s_Bool_write_0(s_Tuple2_s_Int_i32_s_Bool, s_Int_i32): s_Tuple2_s_Int_i32_s_Bool
  function s_Tuple2_s_Int_i32_s_Bool_read_1(s_Tuple2_s_Int_i32_s_Bool): s_Bool
  function s_Tuple2_s_Int_i32_s_Bool_write_1(s_Tuple2_s_Int_i32_s_Bool, s_Bool): s_Tuple2_s_Int_i32_s_Bool
}

function p_Tuple2_s_Int_i32_s_Bool_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Int_i32_s_Bool_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Int_i32_s_Bool_unreachable(
): s_Tuple2_s_Int_i32_s_Bool
  requires false

function p_Tuple2_s_Int_i32_s_Bool_snap(
  self_p: Ref
): s_Tuple2_s_Int_i32_s_Bool
  requires p_Tuple2_s_Int_i32_s_Bool(self_p)
{
  unfolding p_Tuple2_s_Int_i32_s_Bool(self_p) in (s_Tuple2_s_Int_i32_s_Bool_cons(p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Bool_field_0(self_p)), p_Bool_snap(p_Tuple2_s_Int_i32_s_Bool_field_1(self_p))))
}

predicate p_Tuple2_s_Int_i32_s_Bool(self_p: Ref) {
  (p_Int_i32(p_Tuple2_s_Int_i32_s_Bool_field_0(self_p))) && (p_Bool(p_Tuple2_s_Int_i32_s_Bool_field_1(self_p)))
}

method assign_p_Tuple2_s_Int_i32_s_Bool(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Bool
)
  ensures p_Tuple2_s_Int_i32_s_Bool(_p)
  ensures (p_Tuple2_s_Int_i32_s_Bool_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Int_i32_s_Bool(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Bool
)
  requires p_Tuple2_s_Int_i32_s_Bool(_p)
  ensures p_Tuple2_s_Int_i32_s_Bool(_p)
  ensures (p_Tuple2_s_Int_i32_s_Bool_snap(_p)) == (_s_new)

domain s_Tuple2_s_Int_i32_s_Adt_Vector {
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_0_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_0_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_1_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_1_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self), s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))} (s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self), s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))) == (self)
  }
  function s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Int_i32, s_Adt_Vector): s_Tuple2_s_Int_i32_s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector): s_Int_i32
  function s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(s_Tuple2_s_Int_i32_s_Adt_Vector, s_Int_i32): s_Tuple2_s_Int_i32_s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector): s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(s_Tuple2_s_Int_i32_s_Adt_Vector, s_Adt_Vector): s_Tuple2_s_Int_i32_s_Adt_Vector
}

function p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Int_i32_s_Adt_Vector_unreachable(
): s_Tuple2_s_Int_i32_s_Adt_Vector
  requires false

function p_Tuple2_s_Int_i32_s_Adt_Vector_snap(
  self_p: Ref
): s_Tuple2_s_Int_i32_s_Adt_Vector
  requires p_Tuple2_s_Int_i32_s_Adt_Vector(self_p)
{
  unfolding p_Tuple2_s_Int_i32_s_Adt_Vector(self_p) in (s_Tuple2_s_Int_i32_s_Adt_Vector_cons(p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(self_p)), p_Adt_Vector_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(self_p))))
}

predicate p_Tuple2_s_Int_i32_s_Adt_Vector(self_p: Ref) {
  (p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(self_p))) && (p_Adt_Vector(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(self_p)))
}

method assign_p_Tuple2_s_Int_i32_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_Vector
)
  ensures p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Int_i32_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_Vector
)
  requires p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_p)) == (_s_new)

domain s_Tuple2_s_Int_i32_s_Adt_ClampTransform {
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_ClampTransform, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_ClampTransform, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_ClampTransform, val: s_Adt_ClampTransform :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Adt_ClampTransform :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons {
    forall self: s_Tuple2_s_Int_i32_s_Adt_ClampTransform :: {s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(self))} (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(self), s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(self))) == (self)
  }
  function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(s_Int_i32, s_Adt_ClampTransform): s_Tuple2_s_Int_i32_s_Adt_ClampTransform
  function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform): s_Int_i32
  function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_0(s_Tuple2_s_Int_i32_s_Adt_ClampTransform, s_Int_i32): s_Tuple2_s_Int_i32_s_Adt_ClampTransform
  function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_read_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform): s_Adt_ClampTransform
  function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_write_1(s_Tuple2_s_Int_i32_s_Adt_ClampTransform, s_Adt_ClampTransform): s_Tuple2_s_Int_i32_s_Adt_ClampTransform
}

function p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Int_i32_s_Adt_ClampTransform_unreachable(
): s_Tuple2_s_Int_i32_s_Adt_ClampTransform
  requires false

function p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(
  self_p: Ref
): s_Tuple2_s_Int_i32_s_Adt_ClampTransform
  requires p_Tuple2_s_Int_i32_s_Adt_ClampTransform(self_p)
{
  unfolding p_Tuple2_s_Int_i32_s_Adt_ClampTransform(self_p) in (s_Tuple2_s_Int_i32_s_Adt_ClampTransform_cons(p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(self_p)), p_Adt_ClampTransform_snap(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(self_p))))
}

predicate p_Tuple2_s_Int_i32_s_Adt_ClampTransform(self_p: Ref) {
  (p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_0(self_p))) && (p_Adt_ClampTransform(p_Tuple2_s_Int_i32_s_Adt_ClampTransform_field_1(self_p)))
}

method assign_p_Tuple2_s_Int_i32_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_ClampTransform
)
  ensures p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Int_i32_s_Adt_ClampTransform(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_ClampTransform
)
  requires p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_p)
  ensures p_Tuple2_s_Int_i32_s_Adt_ClampTransform(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_ClampTransform_snap(_p)) == (_s_new)

domain s_Tuple2_s_Adt_Vector_s_Adt_Vector {
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1_read_0 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1(self, val))) == (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(self))
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1_read_1 {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons_read_0 {
    forall f0: s_Adt_Vector, f1: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons_read_1 {
    forall f0: s_Adt_Vector, f1: s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons {
    forall self: s_Tuple2_s_Adt_Vector_s_Adt_Vector :: {s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(self))} (s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(self), s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(self))) == (self)
  }
  function s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(s_Adt_Vector, s_Adt_Vector): s_Tuple2_s_Adt_Vector_s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector): s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_0(s_Tuple2_s_Adt_Vector_s_Adt_Vector, s_Adt_Vector): s_Tuple2_s_Adt_Vector_s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_Vector_read_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector): s_Adt_Vector
  function s_Tuple2_s_Adt_Vector_s_Adt_Vector_write_1(s_Tuple2_s_Adt_Vector_s_Adt_Vector, s_Adt_Vector): s_Tuple2_s_Adt_Vector_s_Adt_Vector
}

function p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Adt_Vector_s_Adt_Vector_unreachable(
): s_Tuple2_s_Adt_Vector_s_Adt_Vector
  requires false

function p_Tuple2_s_Adt_Vector_s_Adt_Vector_snap(
  self_p: Ref
): s_Tuple2_s_Adt_Vector_s_Adt_Vector
  requires p_Tuple2_s_Adt_Vector_s_Adt_Vector(self_p)
{
  unfolding p_Tuple2_s_Adt_Vector_s_Adt_Vector(self_p) in (s_Tuple2_s_Adt_Vector_s_Adt_Vector_cons(p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_0(self_p)), p_Adt_Vector_snap(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_1(self_p))))
}

predicate p_Tuple2_s_Adt_Vector_s_Adt_Vector(self_p: Ref) {
  (p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_0(self_p))) && (p_Adt_Vector(p_Tuple2_s_Adt_Vector_s_Adt_Vector_field_1(self_p)))
}

method assign_p_Tuple2_s_Adt_Vector_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_Vector
)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_Vector_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Adt_Vector_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Adt_Vector_s_Adt_Vector
)
  requires p_Tuple2_s_Adt_Vector_s_Adt_Vector(_p)
  ensures p_Tuple2_s_Adt_Vector_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Adt_Vector_s_Adt_Vector_snap(_p)) == (_s_new)

// -----------------------------
// utility types
// -----------------------------
domain Tuple_3[T0, T1, T2] {
  axiom ax_Tuple_3_elem {
    forall elem0: T0, elem1: T1, elem2: T2 :: {Tuple_3_cons(elem0, elem1, elem2)} (((Tuple_3_elem_0(Tuple_3_cons(elem0, elem1, elem2))) == (elem0)) && ((Tuple_3_elem_1(Tuple_3_cons(elem0, elem1, elem2))) == (elem1))) && ((Tuple_3_elem_2(Tuple_3_cons(elem0, elem1, elem2))) == (elem2))
  }
  function Tuple_3_elem_0(Tuple_3[T0, T1, T2]): T0
  function Tuple_3_elem_1(Tuple_3[T0, T1, T2]): T1
  function Tuple_3_elem_2(Tuple_3[T0, T1, T2]): T2
  function Tuple_3_cons(T0, T1, T2): Tuple_3[T0, T1, T2]
}

domain Tuple_1[T0] {
  axiom ax_Tuple_1_elem {
    forall elem0: T0 :: {Tuple_1_cons(elem0)} (Tuple_1_elem_0(Tuple_1_cons(elem0))) == (elem0)
  }
  function Tuple_1_elem_0(Tuple_1[T0]): T0
  function Tuple_1_cons(T0): Tuple_1[T0]
}

domain Tuple_4[T0, T1, T2, T3] {
  axiom ax_Tuple_4_elem {
    forall elem0: T0, elem1: T1, elem2: T2, elem3: T3 :: {Tuple_4_cons(elem0, elem1, elem2, elem3)} ((((Tuple_4_elem_0(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem0)) && ((Tuple_4_elem_1(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem1))) && ((Tuple_4_elem_2(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem2))) && ((Tuple_4_elem_3(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem3))
  }
  function Tuple_4_elem_0(Tuple_4[T0, T1, T2, T3]): T0
  function Tuple_4_elem_1(Tuple_4[T0, T1, T2, T3]): T1
  function Tuple_4_elem_2(Tuple_4[T0, T1, T2, T3]): T2
  function Tuple_4_elem_3(Tuple_4[T0, T1, T2, T3]): T3
  function Tuple_4_cons(T0, T1, T2, T3): Tuple_4[T0, T1, T2, T3]
}

