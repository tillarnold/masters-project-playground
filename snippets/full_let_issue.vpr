method m_apply_row_by_row(
  _0p: Ref,
  l: s_Int_i32,
  u: s_Int_i32,
  _2p: Ref
)
  requires p_Adt_Vector(_0p)
  requires p_Adt_Vector(_2p)
  requires s_Int_i32_val(s_Adt_Vector_read_len(p_Adt_Vector_snap(_2p))) >= 0
  requires s_Int_i32_val(l) < s_Int_i32_val(u)

  ensures p_Adt_Vector(_0p)
  ensures s_Adt_Vector_read_len(p_Adt_Vector_snap(_0p)) == (s_Adt_Vector_read_len((old(p_Adt_Vector_snap(_2p))) ))


  ensures 
(forall qvar_0_0: s_Int_i32 :: (
(let _1_2s_0 == (qvar_0_0) in
(let x == (old(p_Adt_Vector_snap(_2p))) in

  (0 <= s_Int_i32_val(qvar_0_0) // replace _1_2s_0 with qvar_0_0 here
    ? (
      s_Int_i32_val(_1_2s_0) < s_Int_i32_val(s_Adt_Vector_read_len(x))
      ? f_get(p_Adt_Vector_snap(_0p), s_Int_i32_val(_1_2s_0)) == f_max(l, f_min(u, f_get(x, s_Int_i32_val(_1_2s_0))))
      : true
      )
    : true 
)))))
 // Body removed to minimize example







method m_client( _1p: Ref)
  requires p_Adt_Vector(_1p)
  requires s_Int_i32_val(s_Adt_Vector_read_len((p_Adt_Vector_snap(_1p)))) >= 10
{


  var _6p: Ref
  inhale p_Adt_Vector(_6p)
  
 

  m_apply_row_by_row(_6p, s_Int_i32_cons(100), s_Int_i32_cons(200), _1p)

  assert let _0_1s_0 == (p_Adt_Vector_snap((_6p))) in
    (forall qvar_0_0: s_Int_i32 :: 
      (
        (0 > s_Int_i32_val(qvar_0_0)) ||
        (s_Int_i32_val(qvar_0_0) >= s_Int_i32_val((s_Adt_Vector_read_len(_0_1s_0)))) ||
        (let val == (s_Int_i32_val(f_get(_0_1s_0, s_Int_i32_val(qvar_0_0)))) in (val <= 200) && (val >= 100))
      )
    )

}


// -----------------------------
// functions
// -----------------------------
function f_get(
  _1p: s_Adt_Vector,
  _2p: Int
): s_Int_i32
  requires (_2p) >= 0
  requires (_2p) < s_Int_i32_val(s_Adt_Vector_read_len(_1p))
  requires s_Int_i32_val((s_Adt_Vector_read_len(_1p))) >= 0



function f_min(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
{
  ((s_Int_i32_val(_1p)) >= (s_Int_i32_val(_2p)) ? _2p : _1p)
}

function f_max(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
{
  ((s_Int_i32_val(_1p)) <= (s_Int_i32_val(_2p)) ? _2p : _1p)
}


// -----------------------------
// types
// -----------------------------
field f_s_Int_i32: s_Int_i32
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  axiom ax_inverse_s_Int_i32_cons_s_Int_i32_val {
    forall val: s_Int_i32 :: {s_Int_i32_val(val)} (s_Int_i32_cons(s_Int_i32_val(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}



function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires p_Int_i32(self)
{
  unfolding p_Int_i32(self) in (self.f_s_Int_i32)
}

predicate p_Int_i32(self_p: Ref) {
  acc(self_p.f_s_Int_i32)
}


domain s_Adt_Vector {
  axiom ax_s_Adt_Vector_write_0_read_0 {
    forall self: s_Adt_Vector, val: s_Int_i32 :: {s_Adt_Vector_read_len(s_Adt_Vector_write_0(self, val))} (s_Adt_Vector_read_len(s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32 :: {s_Adt_Vector_cons(f0)} (s_Adt_Vector_read_len(s_Adt_Vector_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_Vector_cons {
    forall self: s_Adt_Vector :: {s_Adt_Vector_cons(s_Adt_Vector_read_len(self))} (s_Adt_Vector_cons(s_Adt_Vector_read_len(self))) == (self)
  }
  function s_Adt_Vector_cons(s_Int_i32): s_Adt_Vector
  function s_Adt_Vector_read_len(s_Adt_Vector): s_Int_i32
  function s_Adt_Vector_write_0(s_Adt_Vector, s_Int_i32): s_Adt_Vector
}

function p_Adt_Vector_field_0(
  self: Ref
): Ref
function s_Adt_Vector_unreachable(
): s_Adt_Vector
  requires false

function p_Adt_Vector_snap(
  self_p: Ref
): s_Adt_Vector
  requires p_Adt_Vector(self_p)
{
  unfolding p_Adt_Vector(self_p) in (s_Adt_Vector_cons(p_Int_i32_snap(p_Adt_Vector_field_0(self_p))))
}

predicate p_Adt_Vector(self_p: Ref) {
  p_Int_i32(p_Adt_Vector_field_0(self_p))
}











field f_Bool: s_Bool
domain s_Bool {
  axiom ax_inverse_s_Bool_val_s_Bool_cons {
    forall val: Bool :: {s_Bool_cons(val)} (s_Bool_val(s_Bool_cons(val))) == (val)
  }
  axiom ax_inverse_s_Bool_cons_s_Bool_val {
    forall val: s_Bool :: {s_Bool_val(val)} (s_Bool_cons(s_Bool_val(val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_val(s_Bool): Bool
}

function s_Bool_unreachable(
): s_Bool
  requires false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires p_Bool(self)
{
  unfolding p_Bool(self) in (self.f_Bool)
}

predicate p_Bool(self_p: Ref) {
  acc(self_p.f_Bool)
}


