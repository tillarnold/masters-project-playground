

method m_id_v(
  _0p: Ref,
  _1p: Ref
)
requires p_Adt_Vector(_0p)
  requires p_Adt_Vector(_1p)
  requires s_Bool_val(
  (let _0_1s_0 == (p_Adt_Vector_snap(_1p)) in
  (let _0_2s_1 == (s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val(
  (
  (let _1_phi_0 == (((((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(qvar_0_0))))) == false
    ? (s_Bool_cons(false))
    : (s_Bool_cons(s_Int_i32_val(qvar_0_0) < (s_Int_i32_val(s_Adt_Vector_read_0(_0_1s_0)))))) in
  ( (((s_Bool_cons(!(s_Bool_val(_1_phi_0))))) == s_Bool_cons(false)
    ? (s_Bool_cons((s_Int_i32_val(f_get(_0_1s_0, qvar_0_0))) > (s_Int_i32_val(s_Int_i32_cons(10)))))
    : s_Bool_cons(true)))))))) in _0_2s_1)))

  ensures p_Adt_Vector(_0p)
  ensures s_Bool_val(s_Bool_cons(((s_Adt_Vector_read_0((p_Adt_Vector_snap(_0p))))) == ((s_Adt_Vector_read_0((old(p_Adt_Vector_snap(_1p))))))))
  ensures s_Bool_val((let _0_1s_0 == (old(p_Adt_Vector_snap(_1p))) in
(
(let _0_3s_1 == (s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_val((
  (let _1_2s_0 == (qvar_0_0) in
  (let _1_6s_1 == (qvar_0_0) in //WAT
  (
  (let _1_phi_0 == (((s_Int_i32_val(s_Int_i32_cons(0))) <= (s_Int_i32_val(qvar_0_0)))
    ? (s_Int_i32_val(_1_2s_0)) < (s_Int_i32_val(s_Adt_Vector_read_0(_0_1s_0)))
    : false
    )
    in
   ((_1_phi_0)
    ? (s_Bool_cons(((f_get((p_Adt_Vector_snap(_0p)) , _1_2s_0))) == ((f_max(f_get(_0_1s_0, _1_2s_0), s_Int_i32_cons(1))))))
    : s_Bool_cons(true)))))))))) in
(_0_3s_1)))))
{
label start
  goto bb_0
label bb_0
  // _0 = move _1
  reassign_p_Adt_Vector(_0p, p_Adt_Vector_snap(_1p))
  goto end
label end
  // return
}







// -----------------------------
// functions
// -----------------------------
function f_get(
  _1p: s_Adt_Vector,
  _2p: s_Int_i32
): s_Int_i32
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) >= (s_Int_i32_val(s_Int_i32_cons(0))))) in
(let _0_0s_0 == (_0_3s_1) in
_0_0s_0))))))
  requires s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_2s_0) in
(let _0_5s_1 == (s_Adt_Vector_read_0(_0_1s_0)) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) < (s_Int_i32_val(_0_5s_1)))) in
(let _0_0s_0 == (_0_3s_1) in
_0_0s_0)))))))


function f_max(
  _1p: s_Int_i32,
  _2p: s_Int_i32
): s_Int_i32
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(let _0_phi_0 == ((_0_5s_1) == (s_Bool_cons(false))
  ? (let _0_10s_1 == (_0_3s_0) in
    (let _0_11s_1 == (_0_1s_0) in
    (let _0_9s_1 == (s_Bool_cons((_0_10s_1) == (_0_11s_1))) in
    (let _0_4s_1 == (_0_9s_1) in
    _0_4s_1))))
  : (let _0_4s_2 == (s_Bool_cons(true)) in
    _0_4s_2)) in
(let _0_4s_3 == (_0_phi_0) in
(let _0_0s_0 == (_0_4s_3) in
_0_0s_0)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_2s_0) in
(let _0_8s_1 == (_0_1s_0) in
(let _0_6s_1 == (s_Bool_cons((s_Int_i32_val(_0_7s_1)) > (s_Int_i32_val(_0_8s_1)))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(let _0_phi_0 == ((_0_5s_1) == (s_Bool_cons(false))
  ? (let _0_10s_1 == (_0_3s_0) in
    (let _0_11s_1 == (_0_2s_0) in
    (let _0_9s_1 == (s_Bool_cons((_0_10s_1) == (_0_11s_1))) in
    (let _0_4s_1 == (_0_9s_1) in
    _0_4s_1))))
  : (let _0_4s_2 == (s_Bool_cons(true)) in
    _0_4s_2)) in
(let _0_4s_3 == (_0_phi_0) in
(let _0_0s_0 == (_0_4s_3) in
_0_0s_0)))))))))))
  ensures s_Bool_val((let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_3s_0 == (result) in
(let _0_7s_1 == (_0_1s_0) in
(let _0_8s_1 == (_0_2s_0) in
(let _0_6s_1 == (s_Bool_cons((_0_7s_1) == (_0_8s_1))) in
(let _0_5s_1 == (s_Bool_cons(!(s_Bool_val(_0_6s_1)))) in
(let _0_phi_0 == ((_0_5s_1) == (s_Bool_cons(false))
  ? (let _0_10s_1 == (_0_3s_0) in
    (let _0_11s_1 == (_0_2s_0) in
    (let _0_9s_1 == (s_Bool_cons((_0_10s_1) == (_0_11s_1))) in
    (let _0_4s_1 == (_0_9s_1) in
    _0_4s_1))))
  : (let _0_4s_2 == (s_Bool_cons(true)) in
    _0_4s_2)) in
(let _0_4s_3 == (_0_phi_0) in
(let _0_0s_0 == (_0_4s_3) in
_0_0s_0)))))))))))
{
  (let _0_1s_0 == (_1p) in
(let _0_2s_0 == (_2p) in
(let _0_4s_1 == (_0_1s_0) in
(let _0_5s_1 == (_0_2s_0) in
(let _0_3s_1 == (s_Bool_cons((s_Int_i32_val(_0_4s_1)) > (s_Int_i32_val(_0_5s_1)))) in
(let _0_phi_0 == ((_0_3s_1) == (s_Bool_cons(false))
  ? (let _0_0s_0 == (_0_2s_0) in
    _0_0s_0)
  : (let _0_0s_1 == (_0_1s_0) in
    _0_0s_1)) in
(let _0_0s_2 == (_0_phi_0) in
_0_0s_2)))))))
}


// -----------------------------
// generics
// -----------------------------
// -----------------------------
// types
// -----------------------------
field f_s_Int_i32: s_Int_i32
domain s_Int_i32 {
  axiom ax_inverse_s_Int_i32_val_s_Int_i32_cons {
    forall val: Int :: {s_Int_i32_cons(val)} (s_Int_i32_val(s_Int_i32_cons(val))) == (val)
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_val(s_Int_i32): Int
}

function s_Int_i32_unreachable(
): s_Int_i32
  requires false

function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires p_Int_i32(self)
{
  unfolding p_Int_i32(self) in (self.f_s_Int_i32)
}

predicate p_Int_i32(self_p: Ref) {
  acc(self_p.f_s_Int_i32)
}

method assign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

method reassign_p_Int_i32(
  _p: Ref,
  _s_new: s_Int_i32
)
  requires p_Int_i32(_p)
  ensures p_Int_i32(_p)
  ensures (p_Int_i32_snap(_p)) == (_s_new)

domain s_Adt_Vector {
  axiom ax_s_Adt_Vector_write_0_read_0 {
    forall self: s_Adt_Vector, val: s_Int_i32 :: {s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))} (s_Adt_Vector_read_0(s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32 :: {s_Adt_Vector_cons(f0)} (s_Adt_Vector_read_0(s_Adt_Vector_cons(f0))) == (f0)
  }
  axiom ax_s_Adt_Vector_cons {
    forall self: s_Adt_Vector :: {s_Adt_Vector_cons(s_Adt_Vector_read_0(self))} (s_Adt_Vector_cons(s_Adt_Vector_read_0(self))) == (self)
  }
  function s_Adt_Vector_cons(s_Int_i32): s_Adt_Vector
  function s_Adt_Vector_read_0(s_Adt_Vector): s_Int_i32
  function s_Adt_Vector_write_0(s_Adt_Vector, s_Int_i32): s_Adt_Vector
}

function p_Adt_Vector_field_0(
  self: Ref
): Ref
function s_Adt_Vector_unreachable(
): s_Adt_Vector
  requires false

function p_Adt_Vector_snap(
  self_p: Ref
): s_Adt_Vector
  requires p_Adt_Vector(self_p)
{
  unfolding p_Adt_Vector(self_p) in (s_Adt_Vector_cons(p_Int_i32_snap(p_Adt_Vector_field_0(self_p))))
}

predicate p_Adt_Vector(self_p: Ref) {
  p_Int_i32(p_Adt_Vector_field_0(self_p))
}

method assign_p_Adt_Vector(
  _p: Ref,
  _s_new: s_Adt_Vector
)
  ensures p_Adt_Vector(_p)
  ensures (p_Adt_Vector_snap(_p)) == (_s_new)

method reassign_p_Adt_Vector(
  _p: Ref,
  _s_new: s_Adt_Vector
)
  requires p_Adt_Vector(_p)
  ensures p_Adt_Vector(_p)
  ensures (p_Adt_Vector_snap(_p)) == (_s_new)


field f_Bool: s_Bool
domain s_Bool {
  axiom ax_inverse_s_Bool_val_s_Bool_cons {
    forall val: Bool :: {s_Bool_cons(val)} (s_Bool_val(s_Bool_cons(val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_val(s_Bool): Bool
}

function s_Bool_unreachable(
): s_Bool
  requires false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires p_Bool(self)
{
  unfolding p_Bool(self) in (self.f_Bool)
}

predicate p_Bool(self_p: Ref) {
  acc(self_p.f_Bool)
}

method assign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)

method reassign_p_Bool(
  _p: Ref,
  _s_new: s_Bool
)
  requires p_Bool(_p)
  ensures p_Bool(_p)
  ensures (p_Bool_snap(_p)) == (_s_new)

domain s_Tuple2_s_Int_i32_s_Adt_Vector {
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_0_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_0_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Int_i32 :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_1_read_0 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))) == (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self))
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_write_1_read_1 {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector, val: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(self, val))) == (val)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons_read_0 {
    forall f0: s_Int_i32, f1: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons_read_1 {
    forall f0: s_Int_i32, f1: s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1)} (s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Tuple2_s_Int_i32_s_Adt_Vector_cons {
    forall self: s_Tuple2_s_Int_i32_s_Adt_Vector :: {s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self), s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))} (s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(self), s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(self))) == (self)
  }
  function s_Tuple2_s_Int_i32_s_Adt_Vector_cons(s_Int_i32, s_Adt_Vector): s_Tuple2_s_Int_i32_s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_read_0(s_Tuple2_s_Int_i32_s_Adt_Vector): s_Int_i32
  function s_Tuple2_s_Int_i32_s_Adt_Vector_write_0(s_Tuple2_s_Int_i32_s_Adt_Vector, s_Int_i32): s_Tuple2_s_Int_i32_s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_read_1(s_Tuple2_s_Int_i32_s_Adt_Vector): s_Adt_Vector
  function s_Tuple2_s_Int_i32_s_Adt_Vector_write_1(s_Tuple2_s_Int_i32_s_Adt_Vector, s_Adt_Vector): s_Tuple2_s_Int_i32_s_Adt_Vector
}

function p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(
  self: Ref
): Ref
function p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(
  self: Ref
): Ref
function s_Tuple2_s_Int_i32_s_Adt_Vector_unreachable(
): s_Tuple2_s_Int_i32_s_Adt_Vector
  requires false

function p_Tuple2_s_Int_i32_s_Adt_Vector_snap(
  self_p: Ref
): s_Tuple2_s_Int_i32_s_Adt_Vector
  requires p_Tuple2_s_Int_i32_s_Adt_Vector(self_p)
{
  unfolding p_Tuple2_s_Int_i32_s_Adt_Vector(self_p) in (s_Tuple2_s_Int_i32_s_Adt_Vector_cons(p_Int_i32_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(self_p)), p_Adt_Vector_snap(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(self_p))))
}

predicate p_Tuple2_s_Int_i32_s_Adt_Vector(self_p: Ref) {
  (p_Int_i32(p_Tuple2_s_Int_i32_s_Adt_Vector_field_0(self_p))) && (p_Adt_Vector(p_Tuple2_s_Int_i32_s_Adt_Vector_field_1(self_p)))
}

method assign_p_Tuple2_s_Int_i32_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_Vector
)
  ensures p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_p)) == (_s_new)

method reassign_p_Tuple2_s_Int_i32_s_Adt_Vector(
  _p: Ref,
  _s_new: s_Tuple2_s_Int_i32_s_Adt_Vector
)
  requires p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures p_Tuple2_s_Int_i32_s_Adt_Vector(_p)
  ensures (p_Tuple2_s_Int_i32_s_Adt_Vector_snap(_p)) == (_s_new)

field f_Tuple0: s_Tuple0
domain s_Tuple0 {
  function s_Tuple0_cons(): s_Tuple0
}

function s_Tuple0_unreachable(
): s_Tuple0
  requires false

function p_Tuple0_snap(
  self: Ref
): s_Tuple0
  requires p_Tuple0(self)

predicate p_Tuple0(self_p: Ref)

method assign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

method reassign_p_Tuple0(
  _p: Ref,
  _s_new: s_Tuple0
)
  requires p_Tuple0(_p)
  ensures p_Tuple0(_p)
  ensures (p_Tuple0_snap(_p)) == (_s_new)

// -----------------------------
// utility types
// -----------------------------
domain Tuple_3[T0, T1, T2] {
  axiom ax_Tuple_3_elem {
    forall elem0: T0, elem1: T1, elem2: T2 :: {Tuple_3_cons(elem0, elem1, elem2)} (((Tuple_3_elem_0(Tuple_3_cons(elem0, elem1, elem2))) == (elem0)) && ((Tuple_3_elem_1(Tuple_3_cons(elem0, elem1, elem2))) == (elem1))) && ((Tuple_3_elem_2(Tuple_3_cons(elem0, elem1, elem2))) == (elem2))
  }
  function Tuple_3_elem_0(Tuple_3[T0, T1, T2]): T0
  function Tuple_3_elem_1(Tuple_3[T0, T1, T2]): T1
  function Tuple_3_elem_2(Tuple_3[T0, T1, T2]): T2
  function Tuple_3_cons(T0, T1, T2): Tuple_3[T0, T1, T2]
}

domain Tuple_1[T0] {
  axiom ax_Tuple_1_elem {
    forall elem0: T0 :: {Tuple_1_cons(elem0)} (Tuple_1_elem_0(Tuple_1_cons(elem0))) == (elem0)
  }
  function Tuple_1_elem_0(Tuple_1[T0]): T0
  function Tuple_1_cons(T0): Tuple_1[T0]
}

domain Tuple_4[T0, T1, T2, T3] {
  axiom ax_Tuple_4_elem {
    forall elem0: T0, elem1: T1, elem2: T2, elem3: T3 :: {Tuple_4_cons(elem0, elem1, elem2, elem3)} ((((Tuple_4_elem_0(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem0)) && ((Tuple_4_elem_1(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem1))) && ((Tuple_4_elem_2(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem2))) && ((Tuple_4_elem_3(Tuple_4_cons(elem0, elem1, elem2, elem3))) == (elem3))
  }
  function Tuple_4_elem_0(Tuple_4[T0, T1, T2, T3]): T0
  function Tuple_4_elem_1(Tuple_4[T0, T1, T2, T3]): T1
  function Tuple_4_elem_2(Tuple_4[T0, T1, T2, T3]): T2
  function Tuple_4_elem_3(Tuple_4[T0, T1, T2, T3]): T3
  function Tuple_4_cons(T0, T1, T2, T3): Tuple_4[T0, T1, T2, T3]
}

domain Tuple_2[T0, T1] {
  axiom ax_Tuple_2_elem {
    forall elem0: T0, elem1: T1 :: {Tuple_2_cons(elem0, elem1)} ((Tuple_2_elem_0(Tuple_2_cons(elem0, elem1))) == (elem0)) && ((Tuple_2_elem_1(Tuple_2_cons(elem0, elem1))) == (elem1))
  }
  function Tuple_2_elem_0(Tuple_2[T0, T1]): T0
  function Tuple_2_elem_1(Tuple_2[T0, T1]): T1
  function Tuple_2_cons(T0, T1): Tuple_2[T0, T1]
}

