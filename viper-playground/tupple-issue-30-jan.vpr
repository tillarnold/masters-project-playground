


// -----------------------------
// functions
// -----------------------------
function f_contains(
  _1p: s_Set,
  _2p: s_Int_i32
): s_Bool

function f_union(
  _1p: s_Set,
  _2p: s_Set
): s_Set

  // original
  ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_2_Tuple_cons(_1p, result)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (s_2_Tuple_read_0(_0_6s_1)) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_6s_1 == (s_2_Tuple_read_1(_0_6s_1)) in
  f_contains(_1_6s_1, qvar_0_0)))))))))

//modified
    ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_2_Tuple_cons(_1p, result)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (_1p) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_6s_1 == (s_2_Tuple_read_1(_0_6s_1)) in
  f_contains(_1_6s_1, qvar_0_0)))))))))
  


method test(s: s_Set, ss: s_Set)

{
  
  assume s_Bool_read_0(f_contains(ss, s_Int_i32_cons(3)))

  var u : s_Set := f_union(ss, s);
  assert s_Bool_read_0(f_contains(u, s_Int_i32_cons(3)))
}

// -----------------------------
// MIR builtins
// -----------------------------
function mir_binop_Eq_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) == (s_Uint_usize_read_0(arg2)))
}

function mir_binop_Eq_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) == (s_Int_i32_read_0(arg2)))
}

function mir_binop_Eq_bool_bool(
  arg1: s_Bool,
  arg2: s_Bool
): s_Bool
{
  s_Bool_cons((s_Bool_read_0(arg1)) == (s_Bool_read_0(arg2)))
}

function mir_binop_BitOr_bool_bool(
  arg1: s_Bool,
  arg2: s_Bool
): s_Bool
{
  s_Bool_cons((s_Bool_read_0(arg1)) || (s_Bool_read_0(arg2)))
}

function mir_binop_Ge_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) >= (s_Uint_usize_read_0(arg2)))
}

function mir_binop_Lt_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) < (s_Uint_usize_read_0(arg2)))
}

// -----------------------------
// generics
// -----------------------------
// -----------------------------
// snapshots
// -----------------------------
domain s_0_Tuple {
  function s_0_Tuple_cons(): s_0_Tuple
}

domain s_Uint_u32 {
  axiom ax_s_Uint_u32_cons_read_0 {
    forall f0: Int :: {s_Uint_u32_cons(f0)} (s_Uint_u32_read_0(s_Uint_u32_cons(f0))) == (f0)
  }
  axiom ax_s_Uint_u32_cons {
    forall self: s_Uint_u32 :: {s_Uint_u32_read_0(self)} (s_Uint_u32_cons(s_Uint_u32_read_0(self))) == (self)
  }
  axiom ax_s_Uint_u32_write_0_read_0 {
    forall self: s_Uint_u32, val: Int :: {s_Uint_u32_read_0(s_Uint_u32_write_0(self, val))} (s_Uint_u32_read_0(s_Uint_u32_write_0(self, val))) == (val)
  }
  axiom s_Uint_u32_bounds {
    forall self: s_Uint_u32 :: {s_Uint_u32_read_0(self)} ((0) <= (s_Uint_u32_read_0(self))) && ((s_Uint_u32_read_0(self)) <= (4294967295))
  }
  function s_Uint_u32_cons(Int): s_Uint_u32
  function s_Uint_u32_read_0(s_Uint_u32): Int
  function s_Uint_u32_write_0(s_Uint_u32, Int): s_Uint_u32
}

domain s_Set {
  axiom ax_s_Set_cons_read_0 {
    forall f0: s_Uint_u32 :: {s_Set_cons(f0)} (s_Set_read_0(s_Set_cons(f0))) == (f0)
  }
  axiom ax_s_Set_cons {
    forall self: s_Set :: {s_Set_cons(s_Set_read_0(self))} (s_Set_cons(s_Set_read_0(self))) == (self)
  }
  axiom ax_s_Set_write_0_read_0 {
    forall self: s_Set, val: s_Uint_u32 :: {s_Set_read_0(s_Set_write_0(self, val))} (s_Set_read_0(s_Set_write_0(self, val))) == (val)
  }
  function s_Set_cons(s_Uint_u32): s_Set
  function s_Set_read_0(s_Set): s_Uint_u32
  function s_Set_write_0(s_Set, s_Uint_u32): s_Set
}

domain s_Bool {
  axiom ax_s_Bool_cons_read_0 {
    forall f0: Bool :: {s_Bool_cons(f0)} (s_Bool_read_0(s_Bool_cons(f0))) == (f0)
  }
  axiom ax_s_Bool_cons {
    forall self: s_Bool :: {s_Bool_cons(s_Bool_read_0(self))} (s_Bool_cons(s_Bool_read_0(self))) == (self)
  }
  axiom ax_s_Bool_write_0_read_0 {
    forall self: s_Bool, val: Bool :: {s_Bool_read_0(s_Bool_write_0(self, val))} (s_Bool_read_0(s_Bool_write_0(self, val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_read_0(s_Bool): Bool
  function s_Bool_write_0(s_Bool, Bool): s_Bool
}

domain s_Int_i32 {
  axiom ax_s_Int_i32_cons_read_0 {
    forall f0: Int :: {s_Int_i32_cons(f0)} (s_Int_i32_read_0(s_Int_i32_cons(f0))) == (f0)
  }
  axiom ax_s_Int_i32_cons {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} (s_Int_i32_cons(s_Int_i32_read_0(self))) == (self)
  }
  axiom ax_s_Int_i32_write_0_read_0 {
    forall self: s_Int_i32, val: Int :: {s_Int_i32_read_0(s_Int_i32_write_0(self, val))} (s_Int_i32_read_0(s_Int_i32_write_0(self, val))) == (val)
  }
  axiom s_Int_i32_bounds {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} ((-(2147483648)) <= (s_Int_i32_read_0(self))) && ((s_Int_i32_read_0(self)) <= (2147483647))
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_read_0(s_Int_i32): Int
  function s_Int_i32_write_0(s_Int_i32, Int): s_Int_i32
}

domain s_Never {
}

domain s_Uint_usize {
  axiom ax_s_Uint_usize_cons_read_0 {
    forall f0: Int :: {s_Uint_usize_cons(f0)} (s_Uint_usize_read_0(s_Uint_usize_cons(f0))) == (f0)
  }
  axiom ax_s_Uint_usize_cons {
    forall self: s_Uint_usize :: {s_Uint_usize_read_0(self)} (s_Uint_usize_cons(s_Uint_usize_read_0(self))) == (self)
  }
  axiom ax_s_Uint_usize_write_0_read_0 {
    forall self: s_Uint_usize, val: Int :: {s_Uint_usize_read_0(s_Uint_usize_write_0(self, val))} (s_Uint_usize_read_0(s_Uint_usize_write_0(self, val))) == (val)
  }
  axiom s_Uint_usize_bounds {
    forall self: s_Uint_usize :: {s_Uint_usize_read_0(self)} ((0) <= (s_Uint_usize_read_0(self))) && ((s_Uint_usize_read_0(self)) <= (18446744073709551615))
  }
  function s_Uint_usize_cons(Int): s_Uint_usize
  function s_Uint_usize_read_0(s_Uint_usize): Int
  function s_Uint_usize_write_0(s_Uint_usize, Int): s_Uint_usize
}

domain s_Ref_Not[T] {
  axiom ax_s_Ref_Not_cons_read_0 {
    forall f0: T :: {s_Ref_Not_cons(f0)} (s_Ref_Not_read_0(s_Ref_Not_cons(f0))) == (f0)
  }
  axiom ax_s_Ref_Not_cons {
    forall self: s_Ref_Not[T] :: {s_Ref_Not_cons(s_Ref_Not_read_0(self))} (s_Ref_Not_cons(s_Ref_Not_read_0(self))) == (self)
  }
  axiom ax_s_Ref_Not_write_0_read_0 {
    forall self: s_Ref_Not[T], val: T :: {s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))} (s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))) == (val)
  }
  function s_Ref_Not_cons(T): s_Ref_Not[T]
  function s_Ref_Not_read_0(s_Ref_Not[T]): T
  function s_Ref_Not_write_0(s_Ref_Not[T], T): s_Ref_Not[T]
}

domain s_2_Tuple[T0, T1] {
  axiom ax_s_2_Tuple_cons_read_0 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_0(s_2_Tuple_cons(f0, f1))) == (f0)
  }
  axiom ax_s_2_Tuple_cons_read_1 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_1(s_2_Tuple_cons(f0, f1))) == (f1)
  }
  axiom ax_s_2_Tuple_cons {
    forall self: s_2_Tuple[T0, T1] :: {s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))} (s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))) == (self)
  }
  axiom ax_s_2_Tuple_write_0_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_2_Tuple_write_0_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))) == (s_2_Tuple_read_1(self))
  }
  axiom ax_s_2_Tuple_write_1_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))) == (s_2_Tuple_read_0(self))
  }
  axiom ax_s_2_Tuple_write_1_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))) == (val)
  }
  function s_2_Tuple_cons(T0, T1): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_0(s_2_Tuple[T0, T1]): T0
  function s_2_Tuple_write_0(s_2_Tuple[T0, T1], T0): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_1(s_2_Tuple[T0, T1]): T1
  function s_2_Tuple_write_1(s_2_Tuple[T0, T1], T1): s_2_Tuple[T0, T1]
}

domain s_3_Tuple[T0, T1, T2] {
  axiom ax_s_3_Tuple_cons_read_0 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_0(s_3_Tuple_cons(f0, f1, f2))) == (f0)
  }
  axiom ax_s_3_Tuple_cons_read_1 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_1(s_3_Tuple_cons(f0, f1, f2))) == (f1)
  }
  axiom ax_s_3_Tuple_cons_read_2 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_2(s_3_Tuple_cons(f0, f1, f2))) == (f2)
  }
  axiom ax_s_3_Tuple_cons {
    forall self: s_3_Tuple[T0, T1, T2] :: {s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))} (s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))) == (self)
  }
  axiom ax_s_3_Tuple_write_0_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_0_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_0_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_1_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_1_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_1_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_2_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_2_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_2_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))) == (val)
  }
  function s_3_Tuple_cons(T0, T1, T2): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_0(s_3_Tuple[T0, T1, T2]): T0
  function s_3_Tuple_write_0(s_3_Tuple[T0, T1, T2], T0): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_1(s_3_Tuple[T0, T1, T2]): T1
  function s_3_Tuple_write_1(s_3_Tuple[T0, T1, T2], T1): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_2(s_3_Tuple[T0, T1, T2]): T2
  function s_3_Tuple_write_2(s_3_Tuple[T0, T1, T2], T2): s_3_Tuple[T0, T1, T2]
}



// -----------------------------
// types
// -----------------------------
function p_0_Tuple_unreachable(
): s_0_Tuple
  requires false
  ensures false

function p_0_Tuple_snap(
  self: Ref
): s_0_Tuple
  requires acc(p_0_Tuple(self), wildcard)
{
  unfolding acc(p_0_Tuple(self), wildcard) in (s_0_Tuple_cons())
}

predicate p_0_Tuple(self: Ref) {
  true
}

method assign_p_0_Tuple(
  self: Ref,
  self_new: s_0_Tuple
)
  ensures p_0_Tuple(self)
  ensures (p_0_Tuple_snap(self)) == (self_new)

field f_Uint_u32: s_Uint_u32
function p_Uint_u32_unreachable(
): s_Uint_u32
  requires false
  ensures false

function p_Uint_u32_snap(
  self: Ref
): s_Uint_u32
  requires acc(p_Uint_u32(self), wildcard)
{
  unfolding acc(p_Uint_u32(self), wildcard) in (self.f_Uint_u32)
}

predicate p_Uint_u32(self: Ref) {
  acc(self.f_Uint_u32)
}

method assign_p_Uint_u32(
  self: Ref,
  self_new: s_Uint_u32
)
  ensures p_Uint_u32(self)
  ensures (p_Uint_u32_snap(self)) == (self_new)

function p_Set_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Set_unreachable(
): s_Set
  requires false
  ensures false

function p_Set_snap(
  self: Ref
): s_Set
  requires acc(p_Set(self), wildcard)
{
  unfolding acc(p_Set(self), wildcard) in (s_Set_cons(p_Uint_u32_snap(p_Set_field_0(self))))
}

predicate p_Set(self: Ref) {
  p_Uint_u32(p_Set_field_0(self))
}

method assign_p_Set(
  self: Ref,
  self_new: s_Set
)
  ensures p_Set(self)
  ensures (p_Set_snap(self)) == (self_new)

field f_Bool: s_Bool
function p_Bool_unreachable(
): s_Bool
  requires false
  ensures false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires acc(p_Bool(self), wildcard)
{
  unfolding acc(p_Bool(self), wildcard) in (self.f_Bool)
}

predicate p_Bool(self: Ref) {
  acc(self.f_Bool)
}

method assign_p_Bool(
  self: Ref,
  self_new: s_Bool
)
  ensures p_Bool(self)
  ensures (p_Bool_snap(self)) == (self_new)

field f_Int_i32: s_Int_i32
function p_Int_i32_unreachable(
): s_Int_i32
  requires false
  ensures false

function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires acc(p_Int_i32(self), wildcard)
{
  unfolding acc(p_Int_i32(self), wildcard) in (self.f_Int_i32)
}

predicate p_Int_i32(self: Ref) {
  acc(self.f_Int_i32)
}

method assign_p_Int_i32(
  self: Ref,
  self_new: s_Int_i32
)
  ensures p_Int_i32(self)
  ensures (p_Int_i32_snap(self)) == (self_new)

function p_Never_unreachable(
): s_Never
  requires false
  ensures false

function p_Never_snap(
  self: Ref
): s_Never
  requires acc(p_Never(self), wildcard)

predicate p_Never(self: Ref) {
  false
}

method assign_p_Never(
  self: Ref,
  self_new: s_Never
)
  ensures p_Never(self)
  ensures (p_Never_snap(self)) == (self_new)

field f_Uint_usize: s_Uint_usize
function p_Uint_usize_unreachable(
): s_Uint_usize
  requires false
  ensures false

function p_Uint_usize_snap(
  self: Ref
): s_Uint_usize
  requires acc(p_Uint_usize(self), wildcard)
{
  unfolding acc(p_Uint_usize(self), wildcard) in (self.f_Uint_usize)
}

predicate p_Uint_usize(self: Ref) {
  acc(self.f_Uint_usize)
}

method assign_p_Uint_usize(
  self: Ref,
  self_new: s_Uint_usize
)
  ensures p_Uint_usize(self)
  ensures (p_Uint_usize_snap(self)) == (self_new)

function p_2_Tuple_$_Set_$_Set_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Set_$_Set_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Set_$_Set_unreachable(
): s_2_Tuple[s_Set, s_Set]
  requires false
  ensures false

