// -----------------------------
// methods
// -----------------------------
method m_assert_true_CALLER_0_11(
  _0p: Ref,
  _1p: Ref
)
  requires p_Bool(_1p)
  requires s_Bool_read_0(p_Bool_snap(_1p))
  ensures p_0_Tuple(_0p)

method m_single_client_CALLER_(
  _0p: Ref,
  _1p: Ref
)
  requires p_Set(_1p)
  ensures p_0_Tuple(_0p)
{
label start
  var _2p: Ref
  var _3p: Ref
  goto bb_0
label bb_0
  // _3 = Set::singleton(const 3_i32) -> [return: bb1, unwind: bb4]
  assign_p_Set(_3p, f_singleton(s_Int_i32_cons(3)))
  goto bb_1
label bb_1
  // _2 = Set::contains(move _3, const 3_i32) -> [return: bb2, unwind: bb4]
  var _tmp0: s_Set
  _tmp0 := p_Set_snap(_3p)
  exhale p_Set(_3p)
  assign_p_Bool(_2p, f_contains(_tmp0, s_Int_i32_cons(3)))
  goto bb_2
label bb_2
  // _0 = assert_true(move _2) -> [return: bb3, unwind: bb4]
  m_assert_true_CALLER_0_11(_0p, _2p)
  goto bb_3
label bb_3
  // return
  exhale p_Set(_1p)
  goto end
label bb_4
  // resume
  assert false // terminator resume
label end
  // return
}

method m_assert_true_CALLER_0_12(
  _0p: Ref,
  _1p: Ref
)
  requires p_Bool(_1p)
  requires s_Bool_read_0(p_Bool_snap(_1p))
  ensures p_0_Tuple(_0p)

method m_union_client_CALLER_(
  _0p: Ref,
  _1p: Ref
)
  requires p_Set(_1p)
  ensures p_0_Tuple(_0p)
{
label start
  var _2p: Ref
  var _3p: Ref
  var _4p: Ref
  var _5p: Ref
  var _6p: Ref
  var _7p: Ref
  var _8p: Ref
  var _9p: Ref
  var _10p: Ref
  var _11p: Ref
  var _12p: Ref
  var _13p: Ref
  var _14p: Ref
  goto bb_0
label bb_0
  // _2 = Set::singleton(const 3_i32) -> [return: bb1, unwind: bb8]
  assign_p_Set(_2p, f_singleton(s_Int_i32_cons(3)))
  goto bb_1
label bb_1
  // FakeRead(ForLet(None), _2)
  // _6 = move _2
  var _tmp0: s_Set
  _tmp0 := p_Set_snap(_2p)
  exhale p_Set(_2p)
  assign_p_Set(_6p, _tmp0)
  // _5 = Set::clone_set(move _6) -> [return: bb2, unwind: bb8]
  var _tmp1: s_Set
  _tmp1 := p_Set_snap(_6p)
  exhale p_Set(_6p)
  assign_p_2_Tuple_$_Set_$_Set(_5p, f_clone_set(_tmp1))
  goto bb_2
label bb_2
  // PlaceMention(_5)
  // _3 = move (_5.0: Set)
  unfold p_2_Tuple_$_Set_$_Set(_5p)
  var _tmp2: s_Set
  _tmp2 := p_Set_snap(p_2_Tuple_$_Set_$_Set_field_0(_5p))
  exhale p_Set(p_2_Tuple_$_Set_$_Set_field_0(_5p))
  assign_p_Set(_3p, _tmp2)
  // _4 = move (_5.1: Set)
  var _tmp3: s_Set
  _tmp3 := p_Set_snap(p_2_Tuple_$_Set_$_Set_field_1(_5p))
  exhale p_Set(p_2_Tuple_$_Set_$_Set_field_1(_5p))
  assign_p_Set(_4p, _tmp3)
  // _9 = move _3
  var _tmp4: s_Set
  _tmp4 := p_Set_snap(_3p)
  exhale p_Set(_3p)
  assign_p_Set(_9p, _tmp4)
  // _8 = Set::contains(move _9, const 3_i32) -> [return: bb3, unwind: bb8]
  var _tmp5: s_Set
  _tmp5 := p_Set_snap(_9p)
  exhale p_Set(_9p)
  assign_p_Bool(_8p, f_contains(_tmp5, s_Int_i32_cons(3)))
  goto bb_3
label bb_3
  // _7 = assert_true(move _8) -> [return: bb4, unwind: bb8]
  m_assert_true_CALLER_0_12(_7p, _8p)
  goto bb_4
label bb_4
  // _11 = move _1
  var _tmp6: s_Set
  _tmp6 := p_Set_snap(_1p)
  exhale p_Set(_1p)
  assign_p_Set(_11p, _tmp6)
  // _12 = move _4
  var _tmp7: s_Set
  _tmp7 := p_Set_snap(_4p)
  exhale p_Set(_4p)
  assign_p_Set(_12p, _tmp7)
  // _10 = Set::union(move _11, move _12) -> [return: bb5, unwind: bb8]
  var _tmp8: s_Set
  _tmp8 := p_Set_snap(_11p)
  exhale p_Set(_11p)
  var _tmp9: s_Set
  _tmp9 := p_Set_snap(_12p)
  exhale p_Set(_12p)
  assign_p_Set(_10p, f_union(_tmp8, _tmp9))
  goto bb_5
label bb_5
  // FakeRead(ForLet(None), _10)
  // _14 = move _10
  var _tmp10: s_Set
  _tmp10 := p_Set_snap(_10p)
  exhale p_Set(_10p)
  assign_p_Set(_14p, _tmp10)
  // _13 = Set::contains(move _14, const 3_i32) -> [return: bb6, unwind: bb8]
  var _tmp11: s_Set
  _tmp11 := p_Set_snap(_14p)
  exhale p_Set(_14p)
  assign_p_Bool(_13p, f_contains(_tmp11, s_Int_i32_cons(3)))
  goto bb_6
label bb_6
  // _0 = assert_true(move _13) -> [return: bb7, unwind: bb8]
  m_assert_true_CALLER_0_12(_0p, _13p)
  goto bb_7
label bb_7
  // return
  goto end
label bb_8
  // resume
  assert false // terminator resume
label end
  // return
}

method m_impure_get_CALLER_(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Vector(_1p)
  requires p_Uint_usize(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
mir_binop_Ge_usize_usize(_0_2s_0, s_Uint_usize_cons(0)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_5s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Lt_usize_usize(_0_2s_0, _0_5s_1)))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_4s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Ge_usize_usize(_0_4s_1, s_Uint_usize_cons(0))))))
  ensures p_2_Tuple_$_Int_i32_$_Vector(_0p)
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (p_2_Tuple_$_Int_i32_$_Vector_snap(_0p)) in
(let _0_5s_1 == (s_2_Tuple_read_0(_0_3s_0)) in
(let _0_6s_1 == (f_get(_0_1s_0, _0_2s_0)) in
mir_binop_Eq_i32_i32(_0_5s_1, _0_6s_1)))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (p_2_Tuple_$_Int_i32_$_Vector_snap(_0p)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_2_Tuple_read_1(_0_3s_0))) in
(let _0_7s_1 == (s_Ref_Not_cons(_0_1s_0)) in
(let _0_6s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_7s_1))) in
s_Bool_cons((_0_5s_1) == (_0_6s_1)))))))))

method m_set_CALLER_(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref,
  _3p: Ref
)
  requires p_Vector(_1p)
  requires p_Uint_usize(_2p)
  requires p_Int_i32(_3p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
mir_binop_Ge_usize_usize(_0_2s_0, s_Uint_usize_cons(0))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_6s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Lt_usize_usize(_0_2s_0, _0_6s_1))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Ge_usize_usize(_0_5s_1, s_Uint_usize_cons(0)))))))
  ensures p_Vector(_0p)
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Vector_read_0(_0_1s_0)) in
(let _0_7s_1 == (s_Vector_read_0(_0_4s_0)) in
mir_binop_Eq_usize_usize(_0_6s_1, _0_7s_1))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (f_get(_0_4s_0, _0_2s_0)) in
mir_binop_Eq_i32_i32(_0_6s_1, _0_3s_0)))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (s_0_Tuple_cons()) in
(let _0_8s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_7s_1 == (s_3_Tuple_cons(_0_1s_0, _0_8s_1, _0_4s_0)) in
s_Bool_cons(forall qvar_0_0: s_Uint_usize :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_usize_usize(qvar_0_0, s_Uint_usize_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Vector_read_0(s_3_Tuple_read_0(_0_7s_1))) in
  (let _1_5s_1 == (mir_binop_Lt_usize_usize(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_1(_0_7s_1))) in
    (let _1_8s_1 == (mir_binop_Eq_usize_usize(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? (let _1_12s_1 == (s_3_Tuple_read_2(_0_7s_1)) in
      (let _1_11s_1 == (f_get(_1_12s_1, qvar_0_0)) in
      (let _1_15s_1 == (s_3_Tuple_read_0(_0_7s_1)) in
      (let _1_14s_1 == (f_get(_1_15s_1, qvar_0_0)) in
      mir_binop_Eq_i32_i32(_1_11s_1, _1_14s_1)))))
    : s_Bool_cons(true))))))))))))))))

method m_assert_true_CALLER_(
  _0p: Ref,
  _1p: Ref
)
  requires p_Bool(_1p)
  requires s_Bool_read_0(p_Bool_snap(_1p))
  ensures p_0_Tuple(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  exhale p_Bool(_1p)
  goto end
label end
  // return
}

method m_assert_eq_CALLER_(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Int_i32_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Eq_i32_i32(_0_1s_0, _0_2s_0))))
  ensures p_0_Tuple(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  exhale p_Int_i32(_1p)
  exhale p_Int_i32(_2p)
  goto end
label end
  // return
}

method m_assert_eq_snap_CALLER_(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Vector(_1p)
  requires p_Vector(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Vector_snap(_2p)) in
(let _0_4s_1 == (s_Ref_Not_cons(_0_1s_0)) in
(let _0_6s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_6s_1))) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))))
  ensures p_0_Tuple(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  exhale p_Vector(_1p)
  exhale p_Vector(_2p)
  goto end
label end
  // return
}

method m_set_CALLER_0_90(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref,
  _3p: Ref
)
  requires p_Vector(_1p)
  requires p_Uint_usize(_2p)
  requires p_Int_i32(_3p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
mir_binop_Ge_usize_usize(_0_2s_0, s_Uint_usize_cons(0))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_6s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Lt_usize_usize(_0_2s_0, _0_6s_1))))))
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_2s_0 == (p_Uint_usize_snap(_2p)) in
(let _0_3s_0 == (p_Int_i32_snap(_3p)) in
(let _0_5s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Ge_usize_usize(_0_5s_1, s_Uint_usize_cons(0)))))))
  ensures p_Vector(_0p)
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (s_Vector_read_0(_0_1s_0)) in
(let _0_7s_1 == (s_Vector_read_0(_0_4s_0)) in
mir_binop_Eq_usize_usize(_0_6s_1, _0_7s_1))))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (f_get(_0_4s_0, _0_2s_0)) in
mir_binop_Eq_i32_i32(_0_6s_1, _0_3s_0)))))))
  ensures s_Bool_read_0((let _0_1s_0 == (old(p_Vector_snap(_1p))) in
(let _0_2s_0 == (old(p_Uint_usize_snap(_2p))) in
(let _0_3s_0 == (old(p_Int_i32_snap(_3p))) in
(let _0_4s_0 == (p_Vector_snap(_0p)) in
(let _0_6s_1 == (s_0_Tuple_cons()) in
(let _0_8s_1 == (s_Ref_Not_cons(_0_2s_0)) in
(let _0_7s_1 == (s_3_Tuple_cons(_0_1s_0, _0_8s_1, _0_4s_0)) in
s_Bool_cons(forall qvar_0_0: s_Uint_usize :: s_Bool_read_0((let _1_3s_1 == (mir_binop_Ge_usize_usize(qvar_0_0, s_Uint_usize_cons(0))) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_7s_1 == (s_Vector_read_0(s_3_Tuple_read_0(_0_7s_1))) in
  (let _1_5s_1 == (mir_binop_Lt_usize_usize(qvar_0_0, _1_7s_1)) in
  (s_Bool_read_0(_1_5s_1)) == (false)
  ? s_Bool_cons(true)
  : (let _1_10s_1 == (s_Ref_Not_read_0(s_3_Tuple_read_1(_0_7s_1))) in
    (let _1_8s_1 == (mir_binop_Eq_usize_usize(qvar_0_0, _1_10s_1)) in
    (s_Bool_read_0(_1_8s_1)) == (false)
    ? (let _1_12s_1 == (s_3_Tuple_read_2(_0_7s_1)) in
      (let _1_11s_1 == (f_get(_1_12s_1, qvar_0_0)) in
      (let _1_15s_1 == (s_3_Tuple_read_0(_0_7s_1)) in
      (let _1_14s_1 == (f_get(_1_15s_1, qvar_0_0)) in
      mir_binop_Eq_i32_i32(_1_11s_1, _1_14s_1)))))
    : s_Bool_cons(true))))))))))))))))

method m_assert_eq_CALLER_0_90(
  _0p: Ref,
  _1p: Ref,
  _2p: Ref
)
  requires p_Int_i32(_1p)
  requires p_Int_i32(_2p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Int_i32_snap(_1p)) in
(let _0_2s_0 == (p_Int_i32_snap(_2p)) in
mir_binop_Eq_i32_i32(_0_1s_0, _0_2s_0))))
  ensures p_0_Tuple(_0p)

method m_vector_client_CALLER_(
  _0p: Ref,
  _1p: Ref
)
  requires p_Vector(_1p)
  requires s_Bool_read_0((let _0_1s_0 == (p_Vector_snap(_1p)) in
(let _0_3s_1 == (s_Vector_read_0(_0_1s_0)) in
mir_binop_Eq_usize_usize(_0_3s_1, s_Uint_usize_cons(10)))))
  ensures p_0_Tuple(_0p)
{
label start
  var _2p: Ref
  var _3p: Ref
  var _4p: Ref
  var _5p: Ref
  var _6p: Ref
  var _7p: Ref
  goto bb_0
label bb_0
  // _3 = move _1
  var _tmp0: s_Vector
  _tmp0 := p_Vector_snap(_1p)
  exhale p_Vector(_1p)
  assign_p_Vector(_3p, _tmp0)
  // _2 = Vector::set(move _3, const 5_usize, const 42_i32) -> [return: bb1, unwind: bb4]
  var _tmp1: Ref
  assign_p_Uint_usize(_tmp1, s_Uint_usize_cons(5))
  var _tmp2: Ref
  assign_p_Int_i32(_tmp2, s_Int_i32_cons(42))
  m_set_CALLER_0_90(_2p, _3p, _tmp1, _tmp2)
  goto bb_1
label bb_1
  // FakeRead(ForLet(None), _2)
  // _5 = move _2
  var _tmp3: s_Vector
  _tmp3 := p_Vector_snap(_2p)
  exhale p_Vector(_2p)
  assign_p_Vector(_5p, _tmp3)
  // _4 = Vector::get(move _5, const 5_usize) -> [return: bb2, unwind: bb4]
  var _tmp4: s_Vector
  _tmp4 := p_Vector_snap(_5p)
  exhale p_Vector(_5p)
  assign_p_Int_i32(_4p, f_get(_tmp4, s_Uint_usize_cons(5)))
  goto bb_2
label bb_2
  // FakeRead(ForLet(None), _4)
  // _7 = _4
  assign_p_Int_i32(_7p, p_Int_i32_snap(_4p))
  // _6 = assert_eq(move _7, const 42_i32) -> [return: bb3, unwind: bb4]
  var _tmp5: Ref
  assign_p_Int_i32(_tmp5, s_Int_i32_cons(42))
  m_assert_eq_CALLER_0_90(_6p, _7p, _tmp5)
  goto bb_3
label bb_3
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  goto end
label bb_4
  // resume
  assert false // terminator resume
label end
  // return
}

method m_main_CALLER_(
  _0p: Ref
)
  ensures p_0_Tuple(_0p)
{
label start
  goto bb_0
label bb_0
  // _0 = const ()
  assign_p_0_Tuple(_0p, s_0_Tuple_cons())
  // return
  goto end
label end
  // return
}

// -----------------------------
// functions
// -----------------------------
function f_contains(
  _1p: s_Set,
  _2p: s_Int_i32
): s_Bool

function f_card(
  _1p: s_Set
): s_Uint_usize

function f_singleton(
  _1p: s_Int_i32
): s_Set
  ensures s_Bool_read_0(f_contains(result, _1p))
  ensures s_Bool_read_0((let _0_4s_1 == (f_card(result)) in
mir_binop_Eq_usize_usize(_0_4s_1, s_Uint_usize_cons(1))))
  ensures s_Bool_read_0((let _0_4s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_Ref_Not_cons(_1p)) in
(let _0_5s_1 == (s_2_Tuple_cons(result, _0_6s_1)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (s_2_Tuple_read_0(_0_5s_1)) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(let _1_8s_1 == (s_Ref_Not_read_0(s_2_Tuple_read_1(_0_5s_1))) in
(let _1_6s_1 == (mir_binop_Eq_i32_i32(qvar_0_0, _1_8s_1)) in
mir_binop_Eq_bool_bool(_1_3s_1, _1_6s_1)))))))))))
  ensures s_Bool_read_0(f_contains(result, _1p))

function f_clone_set(
  _1p: s_Set
): s_2_Tuple[s_Set, s_Set]
  ensures s_Bool_read_0((let _0_4s_1 == (s_Ref_Not_cons(s_2_Tuple_read_0(result))) in
(let _0_6s_1 == (s_Ref_Not_cons(_1p)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_6s_1))) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))
  ensures s_Bool_read_0((let _0_4s_1 == (s_Ref_Not_cons(s_2_Tuple_read_1(result))) in
(let _0_6s_1 == (s_Ref_Not_cons(_1p)) in
(let _0_5s_1 == (s_Ref_Not_cons(s_Ref_Not_read_0(_0_6s_1))) in
s_Bool_cons((_0_4s_1) == (_0_5s_1))))))

function f_union(
  _1p: s_Set,
  _2p: s_Set
): s_Set
  ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_3_Tuple_cons(result, _1p, _2p)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (s_3_Tuple_read_0(_0_6s_1)) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(let _1_8s_1 == (s_3_Tuple_read_1(_0_6s_1)) in
(let _1_7s_1 == (f_contains(_1_8s_1, qvar_0_0)) in
(let _1_11s_1 == (s_3_Tuple_read_2(_0_6s_1)) in
(let _1_10s_1 == (f_contains(_1_11s_1, qvar_0_0)) in
(let _1_6s_1 == (mir_binop_BitOr_bool_bool(_1_7s_1, _1_10s_1)) in
mir_binop_Eq_bool_bool(_1_3s_1, _1_6s_1)))))))))))))

  // original
  ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_2_Tuple_cons(_1p, result)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (s_2_Tuple_read_0(_0_6s_1)) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_6s_1 == (s_2_Tuple_read_1(_0_6s_1)) in
  f_contains(_1_6s_1, qvar_0_0)))))))))

//modified
    ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_2_Tuple_cons(_1p, result)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (_1p) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_6s_1 == (s_2_Tuple_read_1(_0_6s_1)) in
  f_contains(_1_6s_1, qvar_0_0)))))))))
  
  ensures s_Bool_read_0((let _0_5s_1 == (s_0_Tuple_cons()) in
(let _0_6s_1 == (s_2_Tuple_cons(_2p, result)) in
s_Bool_cons(forall qvar_0_0: s_Int_i32 :: s_Bool_read_0((let _1_4s_1 == (s_2_Tuple_read_0(_0_6s_1)) in
(let _1_3s_1 == (f_contains(_1_4s_1, qvar_0_0)) in
(s_Bool_read_0(_1_3s_1)) == (false)
? s_Bool_cons(true)
: (let _1_6s_1 == (s_2_Tuple_read_1(_0_6s_1)) in
  f_contains(_1_6s_1, qvar_0_0)))))))))


method test(v: Ref)
  requires p_Set(v)

{
  var s : s_Set := p_Set_snap(v);
  var ss : s_Set := f_singleton(s_Int_i32_cons(3));
  assert s_Bool_read_0(f_contains(ss, s_Int_i32_cons(3)))

  var u : s_Set := f_union(ss, s);
  assert s_Bool_read_0(f_contains(u, s_Int_i32_cons(3)))
}

function f_get(
  _1p: s_Vector,
  _2p: s_Uint_usize
): s_Int_i32
  requires s_Bool_read_0(mir_binop_Ge_usize_usize(_2p, s_Uint_usize_cons(0)))
  requires s_Bool_read_0((let _0_5s_1 == (s_Vector_read_0(_1p)) in
mir_binop_Lt_usize_usize(_2p, _0_5s_1)))
  requires s_Bool_read_0((let _0_4s_1 == (s_Vector_read_0(_1p)) in
mir_binop_Ge_usize_usize(_0_4s_1, s_Uint_usize_cons(0))))

// -----------------------------
// MIR builtins
// -----------------------------
function mir_binop_Eq_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) == (s_Uint_usize_read_0(arg2)))
}

function mir_binop_Eq_i32_i32(
  arg1: s_Int_i32,
  arg2: s_Int_i32
): s_Bool
{
  s_Bool_cons((s_Int_i32_read_0(arg1)) == (s_Int_i32_read_0(arg2)))
}

function mir_binop_Eq_bool_bool(
  arg1: s_Bool,
  arg2: s_Bool
): s_Bool
{
  s_Bool_cons((s_Bool_read_0(arg1)) == (s_Bool_read_0(arg2)))
}

function mir_binop_BitOr_bool_bool(
  arg1: s_Bool,
  arg2: s_Bool
): s_Bool
{
  s_Bool_cons((s_Bool_read_0(arg1)) || (s_Bool_read_0(arg2)))
}

function mir_binop_Ge_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) >= (s_Uint_usize_read_0(arg2)))
}

function mir_binop_Lt_usize_usize(
  arg1: s_Uint_usize,
  arg2: s_Uint_usize
): s_Bool
{
  s_Bool_cons((s_Uint_usize_read_0(arg1)) < (s_Uint_usize_read_0(arg2)))
}

// -----------------------------
// generics
// -----------------------------
// -----------------------------
// snapshots
// -----------------------------
domain s_0_Tuple {
  function s_0_Tuple_cons(): s_0_Tuple
}

domain s_Uint_u32 {
  axiom ax_s_Uint_u32_cons_read_0 {
    forall f0: Int :: {s_Uint_u32_cons(f0)} (s_Uint_u32_read_0(s_Uint_u32_cons(f0))) == (f0)
  }
  axiom ax_s_Uint_u32_cons {
    forall self: s_Uint_u32 :: {s_Uint_u32_read_0(self)} (s_Uint_u32_cons(s_Uint_u32_read_0(self))) == (self)
  }
  axiom ax_s_Uint_u32_write_0_read_0 {
    forall self: s_Uint_u32, val: Int :: {s_Uint_u32_read_0(s_Uint_u32_write_0(self, val))} (s_Uint_u32_read_0(s_Uint_u32_write_0(self, val))) == (val)
  }
  axiom s_Uint_u32_bounds {
    forall self: s_Uint_u32 :: {s_Uint_u32_read_0(self)} ((0) <= (s_Uint_u32_read_0(self))) && ((s_Uint_u32_read_0(self)) <= (4294967295))
  }
  function s_Uint_u32_cons(Int): s_Uint_u32
  function s_Uint_u32_read_0(s_Uint_u32): Int
  function s_Uint_u32_write_0(s_Uint_u32, Int): s_Uint_u32
}

domain s_Set {
  axiom ax_s_Set_cons_read_0 {
    forall f0: s_Uint_u32 :: {s_Set_cons(f0)} (s_Set_read_0(s_Set_cons(f0))) == (f0)
  }
  axiom ax_s_Set_cons {
    forall self: s_Set :: {s_Set_cons(s_Set_read_0(self))} (s_Set_cons(s_Set_read_0(self))) == (self)
  }
  axiom ax_s_Set_write_0_read_0 {
    forall self: s_Set, val: s_Uint_u32 :: {s_Set_read_0(s_Set_write_0(self, val))} (s_Set_read_0(s_Set_write_0(self, val))) == (val)
  }
  function s_Set_cons(s_Uint_u32): s_Set
  function s_Set_read_0(s_Set): s_Uint_u32
  function s_Set_write_0(s_Set, s_Uint_u32): s_Set
}

domain s_Bool {
  axiom ax_s_Bool_cons_read_0 {
    forall f0: Bool :: {s_Bool_cons(f0)} (s_Bool_read_0(s_Bool_cons(f0))) == (f0)
  }
  axiom ax_s_Bool_cons {
    forall self: s_Bool :: {s_Bool_cons(s_Bool_read_0(self))} (s_Bool_cons(s_Bool_read_0(self))) == (self)
  }
  axiom ax_s_Bool_write_0_read_0 {
    forall self: s_Bool, val: Bool :: {s_Bool_read_0(s_Bool_write_0(self, val))} (s_Bool_read_0(s_Bool_write_0(self, val))) == (val)
  }
  function s_Bool_cons(Bool): s_Bool
  function s_Bool_read_0(s_Bool): Bool
  function s_Bool_write_0(s_Bool, Bool): s_Bool
}

domain s_Int_i32 {
  axiom ax_s_Int_i32_cons_read_0 {
    forall f0: Int :: {s_Int_i32_cons(f0)} (s_Int_i32_read_0(s_Int_i32_cons(f0))) == (f0)
  }
  axiom ax_s_Int_i32_cons {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} (s_Int_i32_cons(s_Int_i32_read_0(self))) == (self)
  }
  axiom ax_s_Int_i32_write_0_read_0 {
    forall self: s_Int_i32, val: Int :: {s_Int_i32_read_0(s_Int_i32_write_0(self, val))} (s_Int_i32_read_0(s_Int_i32_write_0(self, val))) == (val)
  }
  axiom s_Int_i32_bounds {
    forall self: s_Int_i32 :: {s_Int_i32_read_0(self)} ((-(2147483648)) <= (s_Int_i32_read_0(self))) && ((s_Int_i32_read_0(self)) <= (2147483647))
  }
  function s_Int_i32_cons(Int): s_Int_i32
  function s_Int_i32_read_0(s_Int_i32): Int
  function s_Int_i32_write_0(s_Int_i32, Int): s_Int_i32
}

domain s_Never {
}

domain s_Uint_usize {
  axiom ax_s_Uint_usize_cons_read_0 {
    forall f0: Int :: {s_Uint_usize_cons(f0)} (s_Uint_usize_read_0(s_Uint_usize_cons(f0))) == (f0)
  }
  axiom ax_s_Uint_usize_cons {
    forall self: s_Uint_usize :: {s_Uint_usize_read_0(self)} (s_Uint_usize_cons(s_Uint_usize_read_0(self))) == (self)
  }
  axiom ax_s_Uint_usize_write_0_read_0 {
    forall self: s_Uint_usize, val: Int :: {s_Uint_usize_read_0(s_Uint_usize_write_0(self, val))} (s_Uint_usize_read_0(s_Uint_usize_write_0(self, val))) == (val)
  }
  axiom s_Uint_usize_bounds {
    forall self: s_Uint_usize :: {s_Uint_usize_read_0(self)} ((0) <= (s_Uint_usize_read_0(self))) && ((s_Uint_usize_read_0(self)) <= (18446744073709551615))
  }
  function s_Uint_usize_cons(Int): s_Uint_usize
  function s_Uint_usize_read_0(s_Uint_usize): Int
  function s_Uint_usize_write_0(s_Uint_usize, Int): s_Uint_usize
}

domain s_Ref_Not[T] {
  axiom ax_s_Ref_Not_cons_read_0 {
    forall f0: T :: {s_Ref_Not_cons(f0)} (s_Ref_Not_read_0(s_Ref_Not_cons(f0))) == (f0)
  }
  axiom ax_s_Ref_Not_cons {
    forall self: s_Ref_Not[T] :: {s_Ref_Not_cons(s_Ref_Not_read_0(self))} (s_Ref_Not_cons(s_Ref_Not_read_0(self))) == (self)
  }
  axiom ax_s_Ref_Not_write_0_read_0 {
    forall self: s_Ref_Not[T], val: T :: {s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))} (s_Ref_Not_read_0(s_Ref_Not_write_0(self, val))) == (val)
  }
  function s_Ref_Not_cons(T): s_Ref_Not[T]
  function s_Ref_Not_read_0(s_Ref_Not[T]): T
  function s_Ref_Not_write_0(s_Ref_Not[T], T): s_Ref_Not[T]
}

domain s_2_Tuple[T0, T1] {
  axiom ax_s_2_Tuple_cons_read_0 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_0(s_2_Tuple_cons(f0, f1))) == (f0)
  }
  axiom ax_s_2_Tuple_cons_read_1 {
    forall f0: T0, f1: T1 :: {s_2_Tuple_cons(f0, f1)} (s_2_Tuple_read_1(s_2_Tuple_cons(f0, f1))) == (f1)
  }
  axiom ax_s_2_Tuple_cons {
    forall self: s_2_Tuple[T0, T1] :: {s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))} (s_2_Tuple_cons(s_2_Tuple_read_0(self), s_2_Tuple_read_1(self))) == (self)
  }
  axiom ax_s_2_Tuple_write_0_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_2_Tuple_write_0_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T0 :: {s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_0(self, val))) == (s_2_Tuple_read_1(self))
  }
  axiom ax_s_2_Tuple_write_1_read_0 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_0(s_2_Tuple_write_1(self, val))) == (s_2_Tuple_read_0(self))
  }
  axiom ax_s_2_Tuple_write_1_read_1 {
    forall self: s_2_Tuple[T0, T1], val: T1 :: {s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))} (s_2_Tuple_read_1(s_2_Tuple_write_1(self, val))) == (val)
  }
  function s_2_Tuple_cons(T0, T1): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_0(s_2_Tuple[T0, T1]): T0
  function s_2_Tuple_write_0(s_2_Tuple[T0, T1], T0): s_2_Tuple[T0, T1]
  function s_2_Tuple_read_1(s_2_Tuple[T0, T1]): T1
  function s_2_Tuple_write_1(s_2_Tuple[T0, T1], T1): s_2_Tuple[T0, T1]
}

domain s_3_Tuple[T0, T1, T2] {
  axiom ax_s_3_Tuple_cons_read_0 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_0(s_3_Tuple_cons(f0, f1, f2))) == (f0)
  }
  axiom ax_s_3_Tuple_cons_read_1 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_1(s_3_Tuple_cons(f0, f1, f2))) == (f1)
  }
  axiom ax_s_3_Tuple_cons_read_2 {
    forall f0: T0, f1: T1, f2: T2 :: {s_3_Tuple_cons(f0, f1, f2)} (s_3_Tuple_read_2(s_3_Tuple_cons(f0, f1, f2))) == (f2)
  }
  axiom ax_s_3_Tuple_cons {
    forall self: s_3_Tuple[T0, T1, T2] :: {s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))} (s_3_Tuple_cons(s_3_Tuple_read_0(self), s_3_Tuple_read_1(self), s_3_Tuple_read_2(self))) == (self)
  }
  axiom ax_s_3_Tuple_write_0_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_0(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_0_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_0_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T0 :: {s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_0(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_1_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_1_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_1(self, val))) == (val)
  }
  axiom ax_s_3_Tuple_write_1_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T1 :: {s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_1(self, val))) == (s_3_Tuple_read_2(self))
  }
  axiom ax_s_3_Tuple_write_2_read_0 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_0(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_0(self))
  }
  axiom ax_s_3_Tuple_write_2_read_1 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_1(s_3_Tuple_write_2(self, val))) == (s_3_Tuple_read_1(self))
  }
  axiom ax_s_3_Tuple_write_2_read_2 {
    forall self: s_3_Tuple[T0, T1, T2], val: T2 :: {s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))} (s_3_Tuple_read_2(s_3_Tuple_write_2(self, val))) == (val)
  }
  function s_3_Tuple_cons(T0, T1, T2): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_0(s_3_Tuple[T0, T1, T2]): T0
  function s_3_Tuple_write_0(s_3_Tuple[T0, T1, T2], T0): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_1(s_3_Tuple[T0, T1, T2]): T1
  function s_3_Tuple_write_1(s_3_Tuple[T0, T1, T2], T1): s_3_Tuple[T0, T1, T2]
  function s_3_Tuple_read_2(s_3_Tuple[T0, T1, T2]): T2
  function s_3_Tuple_write_2(s_3_Tuple[T0, T1, T2], T2): s_3_Tuple[T0, T1, T2]
}

domain s_Vector {
  axiom ax_s_Vector_cons_read_0 {
    forall f0: s_Uint_usize, f1: s_Int_i32 :: {s_Vector_cons(f0, f1)} (s_Vector_read_0(s_Vector_cons(f0, f1))) == (f0)
  }
  axiom ax_s_Vector_cons_read_1 {
    forall f0: s_Uint_usize, f1: s_Int_i32 :: {s_Vector_cons(f0, f1)} (s_Vector_read_1(s_Vector_cons(f0, f1))) == (f1)
  }
  axiom ax_s_Vector_cons {
    forall self: s_Vector :: {s_Vector_cons(s_Vector_read_0(self), s_Vector_read_1(self))} (s_Vector_cons(s_Vector_read_0(self), s_Vector_read_1(self))) == (self)
  }
  axiom ax_s_Vector_write_0_read_0 {
    forall self: s_Vector, val: s_Uint_usize :: {s_Vector_read_0(s_Vector_write_0(self, val))} (s_Vector_read_0(s_Vector_write_0(self, val))) == (val)
  }
  axiom ax_s_Vector_write_0_read_1 {
    forall self: s_Vector, val: s_Uint_usize :: {s_Vector_read_1(s_Vector_write_0(self, val))} (s_Vector_read_1(s_Vector_write_0(self, val))) == (s_Vector_read_1(self))
  }
  axiom ax_s_Vector_write_1_read_0 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_0(s_Vector_write_1(self, val))} (s_Vector_read_0(s_Vector_write_1(self, val))) == (s_Vector_read_0(self))
  }
  axiom ax_s_Vector_write_1_read_1 {
    forall self: s_Vector, val: s_Int_i32 :: {s_Vector_read_1(s_Vector_write_1(self, val))} (s_Vector_read_1(s_Vector_write_1(self, val))) == (val)
  }
  function s_Vector_cons(s_Uint_usize, s_Int_i32): s_Vector
  function s_Vector_read_0(s_Vector): s_Uint_usize
  function s_Vector_write_0(s_Vector, s_Uint_usize): s_Vector
  function s_Vector_read_1(s_Vector): s_Int_i32
  function s_Vector_write_1(s_Vector, s_Int_i32): s_Vector
}

// -----------------------------
// types
// -----------------------------
function p_0_Tuple_unreachable(
): s_0_Tuple
  requires false
  ensures false

function p_0_Tuple_snap(
  self: Ref
): s_0_Tuple
  requires acc(p_0_Tuple(self), wildcard)
{
  unfolding acc(p_0_Tuple(self), wildcard) in (s_0_Tuple_cons())
}

predicate p_0_Tuple(self: Ref) {
  true
}

method assign_p_0_Tuple(
  self: Ref,
  self_new: s_0_Tuple
)
  ensures p_0_Tuple(self)
  ensures (p_0_Tuple_snap(self)) == (self_new)

field f_Uint_u32: s_Uint_u32
function p_Uint_u32_unreachable(
): s_Uint_u32
  requires false
  ensures false

function p_Uint_u32_snap(
  self: Ref
): s_Uint_u32
  requires acc(p_Uint_u32(self), wildcard)
{
  unfolding acc(p_Uint_u32(self), wildcard) in (self.f_Uint_u32)
}

predicate p_Uint_u32(self: Ref) {
  acc(self.f_Uint_u32)
}

method assign_p_Uint_u32(
  self: Ref,
  self_new: s_Uint_u32
)
  ensures p_Uint_u32(self)
  ensures (p_Uint_u32_snap(self)) == (self_new)

function p_Set_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Set_unreachable(
): s_Set
  requires false
  ensures false

function p_Set_snap(
  self: Ref
): s_Set
  requires acc(p_Set(self), wildcard)
{
  unfolding acc(p_Set(self), wildcard) in (s_Set_cons(p_Uint_u32_snap(p_Set_field_0(self))))
}

predicate p_Set(self: Ref) {
  p_Uint_u32(p_Set_field_0(self))
}

method assign_p_Set(
  self: Ref,
  self_new: s_Set
)
  ensures p_Set(self)
  ensures (p_Set_snap(self)) == (self_new)

field f_Bool: s_Bool
function p_Bool_unreachable(
): s_Bool
  requires false
  ensures false

function p_Bool_snap(
  self: Ref
): s_Bool
  requires acc(p_Bool(self), wildcard)
{
  unfolding acc(p_Bool(self), wildcard) in (self.f_Bool)
}

predicate p_Bool(self: Ref) {
  acc(self.f_Bool)
}

method assign_p_Bool(
  self: Ref,
  self_new: s_Bool
)
  ensures p_Bool(self)
  ensures (p_Bool_snap(self)) == (self_new)

field f_Int_i32: s_Int_i32
function p_Int_i32_unreachable(
): s_Int_i32
  requires false
  ensures false

function p_Int_i32_snap(
  self: Ref
): s_Int_i32
  requires acc(p_Int_i32(self), wildcard)
{
  unfolding acc(p_Int_i32(self), wildcard) in (self.f_Int_i32)
}

predicate p_Int_i32(self: Ref) {
  acc(self.f_Int_i32)
}

method assign_p_Int_i32(
  self: Ref,
  self_new: s_Int_i32
)
  ensures p_Int_i32(self)
  ensures (p_Int_i32_snap(self)) == (self_new)

function p_Never_unreachable(
): s_Never
  requires false
  ensures false

function p_Never_snap(
  self: Ref
): s_Never
  requires acc(p_Never(self), wildcard)

predicate p_Never(self: Ref) {
  false
}

method assign_p_Never(
  self: Ref,
  self_new: s_Never
)
  ensures p_Never(self)
  ensures (p_Never_snap(self)) == (self_new)

field f_Uint_usize: s_Uint_usize
function p_Uint_usize_unreachable(
): s_Uint_usize
  requires false
  ensures false

function p_Uint_usize_snap(
  self: Ref
): s_Uint_usize
  requires acc(p_Uint_usize(self), wildcard)
{
  unfolding acc(p_Uint_usize(self), wildcard) in (self.f_Uint_usize)
}

predicate p_Uint_usize(self: Ref) {
  acc(self.f_Uint_usize)
}

method assign_p_Uint_usize(
  self: Ref,
  self_new: s_Uint_usize
)
  ensures p_Uint_usize(self)
  ensures (p_Uint_usize_snap(self)) == (self_new)

function p_2_Tuple_$_Set_$_Set_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Set_$_Set_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Set_$_Set_unreachable(
): s_2_Tuple[s_Set, s_Set]
  requires false
  ensures false

function p_2_Tuple_$_Set_$_Set_snap(
  self: Ref
): s_2_Tuple[s_Set, s_Set]
  requires acc(p_2_Tuple_$_Set_$_Set(self), wildcard)
{
  unfolding acc(p_2_Tuple_$_Set_$_Set(self), wildcard) in (s_2_Tuple_cons(p_Set_snap(p_2_Tuple_$_Set_$_Set_field_0(self)), p_Set_snap(p_2_Tuple_$_Set_$_Set_field_1(self))))
}

predicate p_2_Tuple_$_Set_$_Set(self: Ref) {
  (p_Set(p_2_Tuple_$_Set_$_Set_field_0(self))) && (p_Set(p_2_Tuple_$_Set_$_Set_field_1(self)))
}

method assign_p_2_Tuple_$_Set_$_Set(
  self: Ref,
  self_new: s_2_Tuple[s_Set, s_Set]
)
  ensures p_2_Tuple_$_Set_$_Set(self)
  ensures (p_2_Tuple_$_Set_$_Set_snap(self)) == (self_new)

function p_Vector_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Vector_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_Vector_unreachable(
): s_Vector
  requires false
  ensures false

function p_Vector_snap(
  self: Ref
): s_Vector
  requires acc(p_Vector(self), wildcard)
{
  unfolding acc(p_Vector(self), wildcard) in (s_Vector_cons(p_Uint_usize_snap(p_Vector_field_0(self)), p_Int_i32_snap(p_Vector_field_1(self))))
}

predicate p_Vector(self: Ref) {
  (p_Uint_usize(p_Vector_field_0(self))) && (p_Int_i32(p_Vector_field_1(self)))
}

method assign_p_Vector(
  self: Ref,
  self_new: s_Vector
)
  ensures p_Vector(self)
  ensures (p_Vector_snap(self)) == (self_new)

function p_2_Tuple_$_Int_i32_$_Vector_field_0(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Int_i32_$_Vector_field_1(
  self: Ref
): Ref
  ensures ((self) == (null)) == ((result) == (null))
function p_2_Tuple_$_Int_i32_$_Vector_unreachable(
): s_2_Tuple[s_Int_i32, s_Vector]
  requires false
  ensures false

function p_2_Tuple_$_Int_i32_$_Vector_snap(
  self: Ref
): s_2_Tuple[s_Int_i32, s_Vector]
  requires acc(p_2_Tuple_$_Int_i32_$_Vector(self), wildcard)
{
  unfolding acc(p_2_Tuple_$_Int_i32_$_Vector(self), wildcard) in (s_2_Tuple_cons(p_Int_i32_snap(p_2_Tuple_$_Int_i32_$_Vector_field_0(self)), p_Vector_snap(p_2_Tuple_$_Int_i32_$_Vector_field_1(self))))
}

predicate p_2_Tuple_$_Int_i32_$_Vector(self: Ref) {
  (p_Int_i32(p_2_Tuple_$_Int_i32_$_Vector_field_0(self))) && (p_Vector(p_2_Tuple_$_Int_i32_$_Vector_field_1(self)))
}

method assign_p_2_Tuple_$_Int_i32_$_Vector(
  self: Ref,
  self_new: s_2_Tuple[s_Int_i32, s_Vector]
)
  ensures p_2_Tuple_$_Int_i32_$_Vector(self)
  ensures (p_2_Tuple_$_Int_i32_$_Vector_snap(self)) == (self_new)

