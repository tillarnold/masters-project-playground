/// Count how often `el` occurs in `s`
function count(s: Seq[Int], el: Int) : Int 
    ensures result >= 0
    ensures el in s <==> result >= 1
    ensures result == count_idx(s, el)

{
     |s| == 0 ? 0 : ((s[0] == el ? 1  :  0) + (count(s[1..], el)))
}


function count_idx(s: Seq[Int], el: Int) : Int
    ensures result >= 0
    ensures el in s <==> result >= 1
    ensures result == count(s, el)
{
    count_idx_rec(s, el, 0)
}

function count_idx_rec(s: Seq[Int], el: Int, idx: Int) : Int
    requires idx >= 0
    requires idx <= |s|
    ensures result >= 0
    ensures idx < |s| ==> s[idx] == el ==> result >= 1
    ensures el in s[idx..] <==> result >= 1
{
     idx == |s| ? 0 : ((s[idx] == el ? 1  :  0) + (count_idx_rec(s, el, idx + 1)))
}




method count_test3(s1: Seq[Int],s2: Seq[Int], el: Int)
{
    assert count(s1, el) <= count(s1 ++ s2, el)
    assert count(s1, el) + count(s2, el) == count(s1 ++ s2, el)

}

method count_test(s: Seq[Int], el: Int, c: Int)
    requires count(s, el) == c
{
    assert count((Seq()++s), el) == c
    assert count((Seq(el)++s), el) == c + 1

}

method count_test2() {
    assert count(Seq(), 1) == 0
    assert count(Seq(1), 1) == 1
    assert count(Seq(1,1), 1) != 1
}

function to_multiset(s: Seq[Int]): Multiset[Int] 
    ensures forall i:Int :: count(s,i) == (i in result) 



function foo(i: Int) : Int
    ensures result % 2 == 0
{
     i % 4 == 0 ?
        i 
    :
        2
    
}


