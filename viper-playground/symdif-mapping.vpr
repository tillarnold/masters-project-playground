field vecs: Seq[Int]


predicate Vec(v: Ref) {
    acc(v.vecs)
}


function get(v: Ref, idx: Int): Int 
    requires(Vec(v))
    requires(len(v) > idx)    
    requires(idx >= 0)
    {
        (unfolding Vec(v) in v.vecs[idx])
    }


function len(v: Ref): Int
    requires(Vec(v))
    ensures(result >= 0) 
    {
        (unfolding Vec(v) in |v.vecs| )
    }

method set(v: Ref, idx: Int, val: Int)
    requires(Vec(v))
    requires(len(v) > idx)
    requires(idx >= 0)    
    ensures(Vec(v))
    ensures(len(v) == old(len(v)))
    ensures(len(v) > idx)
    ensures(get(v, idx) == val)
    ensures((forall i: Int :: ((i >= 0 && i< len(v) && i != idx) ==> (get(v, i) == old(get(v, i))))))
    {
        unfold Vec(v)
        var old_seq : Seq[Int] := v.vecs;
        var new_seq : Seq[Int] := old_seq[ idx := val]
        v.vecs := new_seq;
        fold Vec(v)
        assert len(v) > idx
    }



function valid_index(v: Ref, idx: Int): Bool
    requires(Vec(v))
{
    0 <= idx && idx < len(v) 
}

method test(v: Ref)
    requires(Vec(v))
    requires(len(v) > 123)
{
    var lens : Int := len(v)
    set(v, 12, 100);
    assert len(v) == lens

    var x : Int := get(v, 12);
    assert len(v) == lens
    assert x == 100; 
}


method blackbox(B: Ref)
    requires(Vec(B))
    ensures(Vec(B))


method test_imp(B: Ref)
    requires(Vec(B))
{
    blackbox(B)
    assert len(B) == len(old(B))
}



function clamp(v: Int): Int
    ensures -100 <= result <= 100
    ensures (-100 <= v <= 100) ==> (result == v)
    ensures v <= -100 ==> result == -100
    ensures v >= 100 ==> result == 100
{
    v > 100 ? 100 : (v< -100)? -100: v
}



method copy_a_to_b(A: Ref, B: Ref)
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))

    ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == get(B, i))
{

    var i: Int := 0;
    assert len(A) == len(B)

    while(i < len(A))
        invariant Vec(A)
        invariant Vec(B)
        invariant len(A) == old(len(A))
        invariant len(B) == old(len(B))
        invariant i >= 0
        invariant forall x: Int :: (valid_index(A, x) &&  x < i) ==> get(A, x) == get(B, x)

    {

        set(A, i, get(B, i))
        i := i + 1;
    }
}


domain Mapping {
  function eval(m: Mapping, idx: Int): Int

//   axiom mapping_is_perm {
//     forall m: Mapping, j: Int, i: Int ::
//         eval(m, j) == eval(m, i) <==> i == j
//   }
}



// method test_perm(m: Map[Int, Int]) {
//     assume (range(m) == domain(m))
//     assume (forall i: Int, j: Int :: i in m && j in m  ==> ((m[i] == m[j]) ==> (i == j)))
//     assert  (forall i: Int, j: Int :: i in m && j in m && i != j ==> (m[i] != m[j]))
// }


function X1(m: Map[Int, Int]) : Bool
{
    forall i: Int, j: Int :: i in m && j in m ==> (i != j ==> (m[i] != m[j]))
}

function X2(m: Map[Int, Int]) : Bool 
    ensures (result ==> X1(m))
{
    forall i: Int, j: Int :: i in m && j in m  ==> ((m[i] == m[j]) ==> (i == j))
}



method X_test1(m: Map[Int, Int]) {
    assume X2(m);
    assert X1(m);
}

method X_test2(m: Map[Int, Int]) {
    assume X1(m);
    assert X2(m);
}

function is_permutation(m: Map[Int, Int]) : Bool
    ensures result ==>  (range(m) == domain(m))
    ensures result ==> X1(m)
    ensures result ==> X2(m)
    ensures result ==> |m| == |domain(m)|
    ensures result ==> |m| == |range(m)|
{
    (range(m) == domain(m)) && X1(m)
 }


method perm_test() {
    var m : Map[Int, Int] := Map(1 := 2, 2 := 1);
    assert |m| == 2
    assert is_permutation(m)
}

method perm_test3() {
    var m2 : Map[Int, Int] := Map(1 := 2, 2 := 1, 3 := 1);
    assert m2[3] == m2[2]
    assert !is_permutation(m2)
}

method perm_test2() {
    var m3 : Map[Int, Int] := Map(1 := 2, 2 := 4, 3 := 1, 4 := 3);
    assert |m3| == 4
    assert is_permutation(m3)
}


function r_d_is_bj(m: Map[Int, Int]) : Bool
    ensures result ==> domain(m) == range(m)
    ensures result ==> (forall i: Int :: ( i in range(m) <==> i in domain(m)))
   // ensures (result ==> forall i: Int, j: Int :: i in m && j in m  ==> ((m[i] == m[j]) ==> (i == j)))

{
    domain(m) == range(m)
}




method test_4(A: Ref, B: Ref)
    requires(acc(Vec(A), 1/1))
    requires(acc(Vec(B), 1/1)) {
        unfold Vec(A)
        unfold Vec(B)
        assert A != B
    }


method test_6(A: Ref, B: Ref)
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    // ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))
{
    
    assume forall i: Int :: (valid_index(A, i) && valid_index(B, i)) ==> get(A,i) == get(B, i)

    // assert  (forall a: Int, j: Int :: valid_index(A, a) && valid_index(A, j) && a != j ==> m[a] != m[j])
    // assert (forall a: Int :: valid_index(A, a) ==> valid_index(A, m[a]))
}



method eq_len_mean_eq_valid(A: Ref, B: Ref)

    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    {
        assert forall i: Int :: (valid_index(A,i) == valid_index(B,i))
}

function vec_eq(A: Ref, B: Ref) : Bool

requires(Vec(A))
    requires(Vec(B))
    {
    len(A) == len(B) && forall i: Int :: (valid_index(A, i) && valid_index(B, i)) ==> get(A,i) == get(B, i)
}

method test_3(A: Ref, B: Ref, m: Map[Int,Int])
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    requires(|m| == len(B))
    requires(is_permutation(m))
    requires(forall i: Int :: valid_index(A, i) ==> i in m)

    // ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))
{
    unfold Vec(A)
    unfold Vec(B)
    assert A != B
    fold Vec(A)
    fold Vec(B)
    assume vec_eq(A, B)
    assert forall i: Int :: (valid_index(A, i) && valid_index(B, i)) ==> get(A,i) == get(B, i)

    // assert  (forall a: Int, j: Int :: valid_index(A, a) && valid_index(A, j) && a != j ==> m[a] != m[j])
    // assert (forall a: Int :: valid_index(A, a) ==> valid_index(A, m[a]))
}


method apply_clamp(A: Ref, B: Ref, m: Map[Int,Int])
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    requires(|m| == len(B))
    requires(is_permutation(m))
    requires(forall i: Int :: valid_index(A, i) ==> i in m)
    requires(forall i: Int :: valid_index(A, i) ==> get(A,i) == get(B, m[i]))

    ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))
    ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == old(clamp(get(A, i))))
    ensures(forall i: Int :: valid_index(B, i) ==> get(B, i) == old(clamp(get(B, i))) )
    ensures(forall i: Int :: valid_index(A, i) ==> get(A,i) == get(B, m[i])) // the mapping shows that dsym is still 0

{

    assert  (forall a: Int, j: Int :: valid_index(A, a) && valid_index(A, j) && a != j ==> m[a] != m[j])
    assert (forall a: Int :: valid_index(A, a) ==> valid_index(A, m[a]))


    var i: Int := 0;

    while(i < len(A))
        invariant Vec(A)
        invariant Vec(B)
        invariant len(A) == old(len(A))
        invariant len(B) == old(len(B))
        invariant i >= 0
        invariant forall x: Int :: {clamp(old(get(A, x)))} (valid_index(A, x) && x < i) ==> get(A, x) == clamp(old(get(A, x)))
        invariant forall x: Int :: {get(A, x)}  (valid_index(A, x) && x >= i) ==> get(A, x) == old(get(A, x))
        invariant forall x: Int :: {clamp(old(get(B, x)))} (valid_index(B, x) && x < i) ==> get(B, x) == clamp(old(get(B, x)))
        invariant forall x: Int :: {get(B, x)}  (valid_index(B, x) && x >= i) ==> get(B, x) == old(get(B, x))

        invariant forall x: Int :: (valid_index(A, x) && x < i) ==>
            (
              m[x] < i ==> get(A,x) == get(B, m[x]) 
              &&
              m[x] >= i ==> get(A,x) ==  clamp(get(B, m[x])) 
            )

    {
        set(A, i, clamp(get(A, i)))
        set(B, i, clamp(get(B, i)))

        i := i + 1;
    }
}