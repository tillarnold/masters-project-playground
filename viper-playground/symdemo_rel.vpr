
// Modeling a Vec from a sequence
field vecs: Seq[Int]

predicate Vec(v: Ref) {
    acc(v.vecs)
}

function get(v: Ref, idx: Int): Int 
    requires(Vec(v))
    requires(len(v) > idx)    
    requires(idx >= 0)
    {
        (unfolding Vec(v) in v.vecs[idx])
    }


function len(v: Ref): Int
    requires(Vec(v))
    ensures(result >= 0) 
    {
        (unfolding Vec(v) in |v.vecs| )
    }

method set(v: Ref, idx: Int, val: Int)
    requires(Vec(v))
    requires(len(v) > idx)
    requires(idx >= 0)    
    ensures(Vec(v))
    ensures(len(v) == old(len(v)))
    ensures(len(v) > idx)
    ensures(get(v, idx) == val)
    ensures((forall i: Int :: ((i >= 0 && i< len(v) && i != idx) ==> (get(v, i) == old(get(v, i))))))
    {
        unfold Vec(v)
        var old_seq : Seq[Int] := v.vecs;
        var new_seq : Seq[Int] := old_seq[ idx := val]
        v.vecs := new_seq;
        fold Vec(v)
        assert len(v) > idx
    }



function valid_index(v: Ref, idx: Int): Bool
    requires(Vec(v))
{
    0 <= idx && idx < len(v) 
}



// Underspecified function that could do anything but it is pure
function clamp(v: Int): Int



method rel_test(a: Int, b: Int) returns (ret: Int)
ensures((rel( a,0) == rel(a,1)) ==> (rel(ret,0) == rel(ret,1)))

{
    ret := 12 + a; 

}

method rel_test2(a: Int, b: Int) returns (ret: Int)
    requires((rel( a,0) == rel(a,1)))
    ensures((rel(ret,0) == rel(ret,1)))

{
    ret := 12 + a;
}


method rel_test2_clinet() {
    var x : Int := rel_test2(10,20);
    var y : Int := rel_test2(50,20);
}


domain Mapping {
    function keys(self: Mapping) : Set[Int]
    function values(self: Mapping): Set[Int]
}


function empty_mapping() : Mapping 
    ensures keys(result) == Set()
    ensures values(result) == Set()

function valid_mapping(m: Mapping) : Bool
{
    |keys(m)| == |values(m)| && forall v : Int :: (v in values(m) ==> translate(m,translate_invert(m, v)) == v)
}

function insert(m: Mapping, k: Int, v: Int) : Mapping 
    requires !(k in keys(m))
    requires !(v in values(m))
    requires |keys(m)| == |values(m)|
    ensures (keys(result) == ((keys(m)) union (Set(k))))
    ensures (values(result) == ((values(m)) union (Set(v))))
    ensures translate(result, k) == v
    ensures translate_invert(result, v) == k
    ensures forall kp: Int :: (kp in keys(m) && kp != k) ==> translate(result, kp) == translate(m, kp)
    ensures translate_invert(result, v) == k
    ensures forall vp: Int :: (vp in values(m) && vp != v) ==> translate_invert(result, vp) == translate_invert(m, vp)


function mapps(m: Mapping, k: Int, v: Int): Bool {
      |keys(m)| == |values(m)| && k in keys(m) && v in values(m) && translate(m, k) == v && translate_invert(m, v) == k
}



function translate(m: Mapping, key: Int) : Int 
    requires |keys(m)| == |values(m)|
    requires(key in keys(m))
    ensures(result in values(m))


function translate_invert(m: Mapping, value: Int) : Int
    requires |keys(m)| == |values(m)|
    requires(value in values(m))
    ensures(result in keys(m))

method insert_client(m: Mapping, k: Int, v: Int)  returns(a: Mapping)
    requires valid_mapping(m)
     requires !(k in keys(m))
    requires !(v in values(m))
    ensures valid_mapping(a)

 {
     a  := insert(m,k,v);
     assert mapps(a, k, v)
}



// // if sdif is 0
// method apply_clamp_0(A: Ref, B: Ref, m: Mapping)
//     requires(Vec(A))
//     requires(Vec(B))
//     requires(len(A) == len(B))
//     requires valid_mapping(m)

//     requires (keys(m) == values(m))

//     requires(forall i: Int :: i in keys(m) <==> valid_index(B, i))


//     //mapping holds ==> sdif is 0
//     requires(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)))) 


//      // Lists same length
//     ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))

//     // Clamping was done
//     ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == old(clamp(get(A, i))))
//     ensures(forall i: Int :: valid_index(B, i) ==> get(B, i) == old(clamp(get(B, i))) )

//     // mapping still holds
//     ensures(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)))) 

// {
//      var i: Int := 0;

//     while(i < len(B))
//         // Generic loop invariant things
//         invariant Vec(A)
//         invariant Vec(B)
//         invariant len(A) == old(len(A))
//         invariant len(B) == old(len(B))
//         invariant i >= 0
//         invariant i <= len(B)

//         // Invariants for clamping
//         invariant forall x: Int :: {clamp(old(get(A, x)))} (valid_index(A, x) && x < i) ==> get(A, x) == clamp(old(get(A, x)))
//         invariant forall x: Int :: (valid_index(A, x) && x >= i) ==> get(A, x) == old(get(A, x))
//         invariant forall x: Int :: {clamp(old(get(B, x)))} (valid_index(B, x) && x < i) ==> get(B, x) == clamp(old(get(B, x)))
//         invariant forall x: Int :: (valid_index(B, x) && x >= i) ==> get(B, x) == old(get(B, x))

//     {
//         set(B, i, clamp(get(B, i)))

//         set(A, i, clamp(get(A, i)))

//         i := i + 1;
//     }
// }





// if sdif is 0
method apply_clamp_0_rel(X: Ref, m: Mapping)
    requires(Vec(X))
    requires(rel(Vec(X),0))
    requires(rel(Vec(X),1))
    requires((Vec(rel(X,0))))
    requires((Vec(rel(X,1))))
    requires(rel(len(X),0) == rel(len(X),1))

    requires valid_mapping(m)


    requires rel(m,0) == rel(m,1)

    requires rel(keys(m),0) == rel(values(m),0)
    requires(forall i: Int :: i in rel(keys(m),0) <==> rel(valid_index(X, i),0))
    requires(forall i: Int :: i in rel(keys(m),1) <==> rel(valid_index(X, i),1))
    requires(forall i: Int :: rel((i in keys(m) <==> valid_index(X, i)),0))
    requires(forall i: Int :: rel(i in keys(m) <==> valid_index(X, i),1))

    requires rel(keys(m),1) == rel(values(m),1)
    requires(forall i: Int :: i in rel(keys(m),1) <==> rel(valid_index(X, i),1))


    //mapping holds ==> sdif is 0
    requires(forall i: Int :: rel(valid_index(X, i),0) ==> ( ( rel(get(X,translate(m,i)),0) == rel(get(rel(X,1), i),1)))) 


     // Lists same length
    ensures Vec(X)
    ensures(Vec(rel(X,0)) && Vec(rel(X,1)) && old(rel(len(X),1)) == rel(len(X),1) && old(len(rel(X,0))) == len(rel(X,0)))
    ensures(rel(len(X),0) == rel(len(X),1))
    ensures(rel(len(X),0) == len(X))
    ensures(rel(len(X),1) == len(X))
    ensures(len(X) == old(len(X)))

    // Clamping was done
    ensures(forall i: Int ::  (valid_index(X, i) ==> (get(X, i) == old(clamp(get(X, i)))) ))
    ensures(forall i: Int ::  (( rel(valid_index(X, i),0) ==> ( rel(get(X, i),0) == old(  rel(clamp(get(X, i)),0) )) )))
    ensures(forall i: Int ::  (( rel(valid_index(X, i),1) ==> ( rel(get(X, i),1) == old(  rel(clamp(get(X, i)),1) )) )))


    // mapping still holds
    ensures(forall i: Int :: rel(valid_index(X, i),0) ==> ( ( rel(get(X,translate(m,i)),0) == rel(get(rel(X,1), i),1))))
    ensures valid_mapping(m)
    ensures rel(valid_mapping(m),0)
    ensures rel(valid_mapping(m),1)

{
     var i: Int := 0;

    while(i < len(X))
        // Generic loop invariant things
        invariant rel(Vec(X),0)
        invariant rel(Vec(X),1)
        invariant (Vec(rel(X,0)))
        invariant (Vec(rel(X,1)))

        invariant Vec(X)

        invariant rel(len(X),0) == old(rel(len((X)),0))
        invariant rel(len(X),1) == old(rel(len((X)),1))
        invariant len(X) == old(len(X))
        invariant i >= 0
        invariant i <= rel(len(X),1) 
        invariant i <= rel(len(X),0) 
        invariant rel(len(X),0) == rel(len(X),1)


        // Invariants for clamping
        invariant forall x: Int :: (valid_index(X, x) && x < i) ==> get(X, x) == clamp(old(get(X, x)))
        invariant forall x: Int :: (valid_index(X, x) && x >= i) ==> get(X, x) == old(get(X, x))

        invariant forall x: Int :: rel((valid_index(X, x) && x < i) ==> get(X, x) == clamp(old(get(X, x))),0)
        invariant forall x: Int :: rel((valid_index(X, x) && x >= i) ==> get(X, x) == old(get(X, x)),0)

        invariant forall x: Int :: rel((valid_index(X, x) && x < i) ==> get(X, x) == clamp(old(get(X, x))),1)
        invariant forall x: Int :: rel((valid_index(X, x) && x >= i) ==> get(X, x) == old(get(X, x)),1)


    {
 
        set(X, i, clamp(get(X, i)))


     
        i := i + 1;

    }



}




method apply_clamp_0_rel_client(A: Ref) 
    requires(Vec(A))
    requires(len(A) == 4)
    {
        set(A, 0, 200)
        set(A, 1, 100)
        set(A, 2, 400)
        set(A, 3, 300)

        var mapping : Mapping := empty_mapping();
        mapping := insert(mapping, 0, 1);
        mapping := insert(mapping, 1, 0);
        mapping := insert(mapping, 2, 3);

        apply_clamp_0_rel(A,  mapping)


}