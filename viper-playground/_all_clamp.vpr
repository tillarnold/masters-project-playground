
// Modeling a Vec from a sequence
field vecs: Seq[Int]

predicate Vec(v: Ref) {
    acc(v.vecs)
}

function get(v: Ref, idx: Int): Int 
    requires(Vec(v))
    requires(len(v) > idx)    
    requires(idx >= 0)
    {
        (unfolding Vec(v) in v.vecs[idx])
    }


function len(v: Ref): Int
    requires(Vec(v))
    ensures(result >= 0) 
    {
        (unfolding Vec(v) in |v.vecs| )
    }

method set(v: Ref, idx: Int, val: Int)
    requires(Vec(v))
    requires(len(v) > idx)
    requires(idx >= 0)    
    ensures(Vec(v))
    ensures(len(v) == old(len(v)))
    ensures(len(v) > idx)
    ensures(get(v, idx) == val)
    ensures((forall i: Int :: ((i >= 0 && i< len(v) && i != idx) ==> (get(v, i) == old(get(v, i))))))
    {
        unfold Vec(v)
        var old_seq : Seq[Int] := v.vecs;
        var new_seq : Seq[Int] := old_seq[ idx := val]
        v.vecs := new_seq;
        fold Vec(v)
        assert len(v) > idx
    }



function valid_index(v: Ref, idx: Int): Bool
    requires(Vec(v))
{
    0 <= idx && idx < len(v) 
}



// Underspecified function that could do anything but it is pure
function clamp(v: Int): Int



domain Mapping {
    function keys(self: Mapping) : Set[Int]
    function values(self: Mapping): Set[Int]
}


function empty_mapping() : Mapping 
    ensures keys(result) == Set()
    ensures values(result) == Set()

function valid_mapping(m: Mapping) : Bool
{
    |keys(m)| == |values(m)| && forall v : Int :: (v in values(m) ==> translate(m,translate_invert(m, v)) == v)
}

function insert(m: Mapping, k: Int, v: Int) : Mapping 
    requires !(k in keys(m))
    requires !(v in values(m))
    requires |keys(m)| == |values(m)|
    ensures (keys(result) == ((keys(m)) union (Set(k))))
    ensures (values(result) == ((values(m)) union (Set(v))))
    ensures translate(result, k) == v
    ensures translate_invert(result, v) == k
    ensures forall kp: Int :: (kp in keys(m) && kp != k) ==> translate(result, kp) == translate(m, kp)
    ensures translate_invert(result, v) == k
    ensures forall vp: Int :: (vp in values(m) && vp != v) ==> translate_invert(result, vp) == translate_invert(m, vp)


function mapps(m: Mapping, k: Int, v: Int): Bool {
      |keys(m)| == |values(m)| && k in keys(m) && v in values(m) && translate(m, k) == v && translate_invert(m, v) == k
}



function translate(m: Mapping, key: Int) : Int 
    requires |keys(m)| == |values(m)|
    requires(key in keys(m))
    ensures(result in values(m))


function translate_invert(m: Mapping, value: Int) : Int
    requires |keys(m)| == |values(m)|
    requires(value in values(m))
    ensures(result in keys(m))

method insert_client(m: Mapping, k: Int, v: Int)  returns(a: Mapping)
    requires valid_mapping(m)
     requires !(k in keys(m))
    requires !(v in values(m))
    ensures valid_mapping(a)

 {
     a  := insert(m,k,v);
     assert mapps(a, k, v)
}


// method b(m: Mapping)
//     requires valid_mapping(m) {
//         assert forall k : Int :: (k in keys(m) ==> translate_invert(m,translate(m, k)) == k)
//     }


// function insert(m: Mapping, key: Int, value: Int ) : Mapping
//     requires !(key in keys(m))
//     ensures key in keys(result)
//     // ensures (((keys(m)) union ({key})) == keys(result))
//     ensures value in values(result)
//     ensures translate(result, key) == value
//     ensures forall other_k : Int :: ((other_k in keys(m)) ==> (other_k in keys(result)))
//     ensures forall other_k : Int :: ((other_k in keys(m)) ==> translate(m, other_k) == translate(result, other_k) )


// Apply clamp to two vecs.
// requrires that A is longer by one single element ant that all oher elements of A are in B
// Thus the symd between A and B is 1
//
// I have an isabelle proof that shows that (for multisets) the only way for the symd to be 1 is if A and B differe in size by one.
// So this covers all possible cases for symd=1 except for A and B being swaped (so the case where B is longer by 1)
method apply_clamp_1(A: Ref, B: Ref, m: Mapping)
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) > len(B)) // A is longer

    requires valid_mapping(m)

    // range(m) = {0,1,..., len(B) -1, len(B) == len(A) - 1} \ {extra_element}
    // range(m) = domain(m) + {len(B)} \ {extra_element}
    // domain(m) = {0,1,..., len(B) - 1}
    requires(forall i: Int :: i in keys(m) <==> valid_index(B, i))
    requires(forall i: Int :: i in values(m) ==> valid_index(A, i))

    // The mapping is valid (dsym is at most 1)
    requires(forall i: Int :: valid_index(B, i) ==> (get(A,translate(m,i)) == get(B, i))) 


    // Lists same length
    ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))

    // Clamping was done
    ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == old(clamp(get(A, i))))
    ensures(forall i: Int :: valid_index(B, i) ==> get(B, i) == old(clamp(get(B, i))) )

    // the mapping shows that dsym is still at most 1
    ensures(forall i: Int :: valid_index(B, i) ==> (get(A,translate(m,i)) == get(B, i))) 

    ensures valid_mapping(m)

{

    var i: Int := 0;

    while(i < len(B))
        // Generic loop invariant things
        invariant Vec(A)
        invariant Vec(B)
        invariant len(A) == old(len(A))
        invariant len(B) == old(len(B))
        invariant i >= 0
        invariant i <= len(B)

        // Invariants for clamping
        invariant forall x: Int :: {clamp(old(get(A, x)))} (valid_index(A, x) && x < i) ==> get(A, x) == clamp(old(get(A, x)))
        invariant forall x: Int :: (valid_index(A, x) && x >= i) ==> get(A, x) == old(get(A, x))
        invariant forall x: Int :: {clamp(old(get(B, x)))} (valid_index(B, x) && x < i) ==> get(B, x) == clamp(old(get(B, x)))
        invariant forall x: Int :: (valid_index(B, x) && x >= i) ==> get(B, x) == old(get(B, x))

    {
        set(B, i, clamp(get(B, i)))

        set(A, i, clamp(get(A, i)))

        i := i + 1;
    }

    assert (forall q: Int :: valid_index(B, q) ==> get(B, q) == old(clamp(get(B, q))) )


   while(i < len(A))
        // Generic loop invariant things
        invariant Vec(A)
        invariant Vec(B)
        invariant len(A) == old(len(A))
        invariant len(B) == old(len(B))
        invariant i >= 0
        invariant (forall q: Int :: valid_index(B, q) ==> get(B, q) == old(clamp(get(B, q))) )

        // Invariants for clamping
        invariant forall x: Int :: {clamp(old(get(A, x)))} (valid_index(A, x) && x < i) ==> get(A, x) == clamp(old(get(A, x)))
        invariant forall x: Int :: (valid_index(A, x) && x >= i) ==> get(A, x) == old(get(A, x))

    {
        set(A, i, clamp(get(A, i)))

        i := i + 1;
    }

        assert (forall q: Int :: valid_index(B, q) ==> get(B, q) == old(clamp(get(B, q))) )

}


// if sdif is 0
method apply_clamp_0(A: Ref, B: Ref, m: Mapping)
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B))
    requires valid_mapping(m)

    requires (keys(m) == values(m))

    requires(forall i: Int :: i in keys(m) <==> valid_index(B, i))


    //mapping holds ==> sdif is 0
    requires(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)))) 


     // Lists same length
    ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))

    // Clamping was done
    ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == old(clamp(get(A, i))))
    ensures(forall i: Int :: valid_index(B, i) ==> get(B, i) == old(clamp(get(B, i))) )

    // mapping still holds
    ensures(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)))) 

    ensures valid_mapping(m)
{
    apply_clamp_same(A, B, m, -1)
}

// Requires that A and B have same length and that exactly one element in A is not in B and exactly one in B is not in A
// the mapping mapps all the matching elemens and also matches the two non matching ones.
// 
// 
method apply_clamp_same(A: Ref, B: Ref, m: Mapping, extra_B_index: Int)
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == len(B)) 
    requires valid_mapping(m)

    requires (|keys(m)| == |values(m)|)
    requires keys(m) == values(m)

    // range(m) = {0,1,..., len(B) -1, len(B) == len(A) - 1} \ {extra_element}
    // range(m) = domain(m) + {len(B)} \ {extra_element}
    // domain(m) = {0,1,..., len(B) - 1}
    requires(forall i: Int :: i in keys(m) <==> valid_index(B, i))
    requires(forall i: Int :: i in values(m) <==> valid_index(B, i))


    // The mapping is valid (dsym is at most 2)
    requires(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)) || i == extra_B_index)) 

    // Lists same length
    ensures(Vec(A) && Vec(B) && old(len(B)) == len(B) && old(len(A)) == len(A))

    // Clamping was done
    ensures(forall i: Int :: valid_index(A, i) ==> get(A, i) == old(clamp(get(A, i))))
    ensures(forall i: Int :: valid_index(B, i) ==> get(B, i) == old(clamp(get(B, i))) )

    // the mapping shows that dsym is still at most 2
    ensures(forall i: Int :: valid_index(B, i) ==> ((get(A,translate(m,i)) == get(B, i)) || i == extra_B_index)) 
    ensures valid_mapping(m)
{

    var i: Int := 0;

    while(i < len(B))
        // Generic loop invariant things
        invariant Vec(A)
        invariant Vec(B)
        invariant len(A) == old(len(A))
        invariant len(B) == old(len(B))
        invariant i >= 0
        invariant i <= len(B)

        // Invariants for clamping
        invariant forall x: Int :: {clamp(old(get(A, x)))} (valid_index(A, x) && x < i) ==> get(A, x) == clamp(old(get(A, x)))
        invariant forall x: Int :: (valid_index(A, x) && x >= i) ==> get(A, x) == old(get(A, x))
        invariant forall x: Int :: {clamp(old(get(B, x)))} (valid_index(B, x) && x < i) ==> get(B, x) == clamp(old(get(B, x)))
        invariant forall x: Int :: (valid_index(B, x) && x >= i) ==> get(B, x) == old(get(B, x))

    {
        set(B, i, clamp(get(B, i)))

        set(A, i, clamp(get(A, i)))

        i := i + 1;
    }

}




// function Mapping_from_Map(m: Map[Int, Int]) : Mapping
//     requires |domain(m)| == |range(m)|
//     ensures keys(result) == domain(m)
//     ensures values(result) == range(m)
//     ensures (forall k : Int :: (k in domain(m) ==> translate(result, k) == m[k]))


method client_1(A: Ref, B: Ref) 
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == 4)
    requires(len(B) == 3)
    {
        set(A, 0, 200)
        set(A, 1, 100)
        set(A, 2, 400)
        set(A, 3, 300)

        set(B, 0, 100)
        set(B, 1, 200)
        set(B, 2, 300)

        var mapping : Mapping := empty_mapping();
        mapping := insert(mapping, 0, 1);
        mapping := insert(mapping, 1, 0);
        mapping := insert(mapping, 2, 3);

        apply_clamp_1(A, B, mapping)


       assert get(A, 0) == get(B, 1)
}


// method client_1_without_map(A: Ref, B: Ref,mapping: Mapping) 
//     requires(Vec(A))
//     requires(Vec(B))
//     requires(len(A) == 4)
//     requires(len(B) == 3)
//     requires keys(mapping) == Set(0,1,2)
//     requires values(mapping) == Set(0,1,3)
//     requires translate(mapping, 0) == 1
//         && translate(mapping, 1) == 0
//         && translate(mapping, 2) == 3
//     {
//         set(A, 0, 200)
//         set(A, 1, 100)
//         set(A, 2, 400)
//         set(A, 3, 300)

//         set(B, 0, 100)
//         set(B, 1, 200)
//         set(B, 2, 300)


//         apply_clamp_1(A, B, mapping)


//         assert get(A, 0) == get(B, 1)
//     }



method client_same(A: Ref, B: Ref) 
    requires(Vec(A))
    requires(Vec(B))
    requires(len(A) == 4)
    requires(len(B) == 4)
    {
        set(A, 0, 1)
        set(A, 1, 2)
        set(A, 2, 3)
        set(A, 3, 100)

        set(B, 0, 1)
        set(B, 1, 500)
        set(B, 2, 2)
        set(B, 3, 3)

        // var m : Map[Int, Int] := Map(0 := 0, 1 := 3, 2 := 1, 3 := 2);

        var mapping : Mapping := empty_mapping();
        mapping := insert(mapping, 0, 0);
        mapping := insert(mapping, 1, 3);
        mapping := insert(mapping, 2, 1);
        mapping := insert(mapping, 3, 2);

        assert valid_mapping(mapping)


        apply_clamp_same(A, B, mapping, 1)


         assert get(A, 0) == get(B, 0)
}

