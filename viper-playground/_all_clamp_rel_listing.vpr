// Modeling a Vec from a sequence
field vecs: Seq[Int]

predicate Vec(v: Ref) { acc(v.vecs) }

function valid_index(v: Ref, idx: Int): Bool
    requires Vec(v)
{ 0 <= idx < len(v)  }


function get(v: Ref, idx: Int): Int 
    requires Vec(v) && valid_index(v, idx)
{ (unfolding Vec(v) in v.vecs[idx]) }


function len(v: Ref): Int
    requires Vec(v)
{ (unfolding Vec(v) in |v.vecs| ) }

method set(v: Ref, idx: Int, val: Int)
    requires Vec(v) && valid_index(v, idx)
    ensures Vec(v) && len(v) == old(len(v))
    ensures get(v, idx) == val
    ensures forall i: Int :: (i >= 0 && i< len(v) && i != idx) ==> get(v, i) == old(get(v, i))
{
    unfold Vec(v)
    v.vecs := v.vecs[ idx := val];
    fold Vec(v)
}







// Modelign the mapping
domain Mapping {
    function keys(self: Mapping) : Set[Int]
    function values(self: Mapping): Set[Int]
}

function translate(m: Mapping, key: Int) : Int 
    requires |keys(m)| == |values(m)|
    requires key in keys(m)
    ensures result in values(m)


function translate_invert(m: Mapping, value: Int) : Int
    requires |keys(m)| == |values(m)|
    requires value in values(m)
    ensures result in keys(m)


function is_bijection(m: Mapping) : Bool {
    |keys(m)| == |values(m)| && forall v : Int :: v in values(m) ==> translate(m,translate_invert(m, v)) == v
}




// Underspecified function that could do anything but it is pure
function clamp(v: Int): Int


// if sdif is 0
method apply_clamp_0_rel(V: Ref, m: Mapping)
    requires Vec(V)

    requires keys(m) == values(m)
    requires is_bijection(m)
    requires forall i: Int :: i in keys(m) <==> valid_index(V, i)

    requires rel(len(V),0) == rel(len(V),1)
    requires rel(m,0) == rel(m,1)

    
    //Symetric distance is 0
    requires forall i: Int :: rel(valid_index(V, i),0) ==>  rel(get(V,translate(m,i)),0) == rel(get(rel(V,1), i),1)


     // Lists same length
    ensures Vec(V) && len(V) == old(len(V))

    // Clamping was done
    ensures forall i: Int :: valid_index(V, i) ==> get(V, i) == old(clamp(get(V, i)))
   
    // mapping still holds
    ensures forall i: Int :: rel(valid_index(V, i),0) ==>  rel(get(V,translate(m,i)),0) == rel(get(rel(V,1), i),1)
    ensures is_bijection(m)
{
    apply_clamp_same(V , m, -1)
}




// Requires that A and B have same length and that exactly one element in A is not in B and exactly one in B is not in A
// the mapping mapps all the matching elemens and also matches the two non matching ones.
// 
// 
method apply_clamp_same(V: Ref, m: Mapping, extra_B_index: Int)
    requires Vec(V)

    requires rel(len(V),0) == rel(len(V),1)
    requires rel(m,0) == rel(m,1)
    requires rel(extra_B_index,0) == rel(extra_B_index,1)


    requires keys(m) == values(m)
    requires is_bijection(m)
    requires forall i: Int :: i in keys(m) <==> valid_index(V, i)
    requires forall i: Int :: i in values(m) <==> valid_index(V, i)


    // The mapping is valid (dsym is at most 2)
    requires forall i: Int :: rel(valid_index(V, i),0) ==> (rel(get(V,translate(m,i)),0) == rel(get(rel(V,1), i),1)) || i == extra_B_index 

   // Lists same length
    ensures Vec(V)
    ensures len(V) == old(len(V))

    // Clamping was done
    ensures(forall i: Int :: valid_index(V, i) ==> get(V, i) == old(clamp(get(V, i))))

    // mapping still holds
    ensures forall i: Int :: rel(valid_index(V, i),0) ==> (rel(get(V,translate(m,i)),0) == rel(get(rel(V,1), i),1)) || i == extra_B_index 
    ensures is_bijection(m)
{

    var i: Int := 0;

     while(i < len(V))
        // Generic loop invariant things
        invariant Vec(V) && len(V) == old(len(V)) &&  0 <= i


        // Invariants for clamping
        invariant forall x: Int :: (valid_index(V, x) && x < i) ==> get(V, x) == clamp(old(get(V, x)))
        invariant forall x: Int :: (valid_index(V, x) && x >= i) ==> get(V, x) == old(get(V, x))

    {
        set(V, i, clamp(get(V, i)))
        i := i + 1;
    }

}


// Apply clamp to two vecs.
// requrires that A is longer by one single element ant that all oher elements of A are in B
// Thus the symd between A and B is 1
//
// I have an isabelle proof that shows that (for multisets) the only way for the symd to be 1 is if A and B differe in size by one.
// So this covers all possible cases for symd=1 except for A and B being swaped (so the case where B is longer by 1)
method apply_clamp_1(V: Ref, m: Mapping)
    requires Vec(V)
    requires rel(len(V),0) > rel(len(V),1) // A is longer
    requires rel(m,0) == rel(m,1)

    // range(m) = {0,1,..., len(B) -1, len(B) == len(A) - 1} \ {extra_element}
    // range(m) = domain(m) + {len(B)} \ {extra_element}
    // domain(m) = {0,1,..., len(B) - 1}
    requires is_bijection(m)
    requires forall i: Int :: i in keys(m) <==> rel(valid_index(V, i),1)
    requires forall i: Int :: i in values(m) ==> rel(valid_index(V, i),0)

    // The mapping is valid (dsym is at most 1)
    requires forall i: Int :: rel(valid_index(V, i),1) ==> rel(get(V,translate(m,i)),0) == rel(get(V, i),1)


    // Lists same length
    ensures Vec(V) && len(V) == old(len(V))
    // Clamping was done
    ensures forall i: Int :: valid_index(V, i) ==> get(V, i) == old(clamp(get(V, i)))


    // the mapping shows that dsym is still at most 1
    ensures forall i: Int :: rel(valid_index(V, i),1) ==> rel(get(V,translate(m,i)),0) == rel(get(V, i),1)
    ensures is_bijection(m)
{

    var i: Int := 0;

    while(i < len(V))
        invariant Vec(V) && len(V) == old(len(V)) && 0 <= i 

        invariant forall x: Int :: (valid_index(V, x) && x < i) ==> get(V, x) == clamp(old(get(V, x)))
        invariant forall x: Int :: (valid_index(V, x) && x >= i) ==> get(V, x) == old(get(V, x))
    {
        set(V, i, clamp(get(V, i)))
        i := i + 1;
    }
}



function empty_mapping() : Mapping 
    ensures keys(result) == Set()
    ensures values(result) == Set()

function insert(m: Mapping, k: Int, v: Int) : Mapping 
    requires !(k in keys(m))
    requires !(v in values(m))
    requires |keys(m)| == |values(m)|
    ensures keys(result) == ((keys(m)) union (Set(k)))
    ensures values(result) == ((values(m)) union (Set(v)))
    ensures translate(result, k) == v
    ensures translate_invert(result, v) == k
    ensures forall kp: Int :: (kp in keys(m) && kp != k) ==> translate(result, kp) == translate(m, kp)
    ensures translate_invert(result, v) == k
    ensures forall vp: Int :: (vp in values(m) && vp != v) ==> translate_invert(result, vp) == translate_invert(m, vp)


method apply_clamp_0_rel_client(A: Ref) 
    requires(Vec(A))
    requires(rel(Vec(A),0))
    requires(rel(Vec(A),1))
    requires(len(A) == 4)
{
        set(A, 0, 200)
        set(A, 1, 100)
        set(A, 2, 400)
        set(A, 3, 300)

        var m : Mapping := empty_mapping();
        m := insert(m, 0, 1);
        m := insert(m, 1, 0);
        m := insert(m, 2, 2);
        m := insert(m, 3, 3);
        assume forall i: Int :: rel(valid_index(A, i),0) ==> ((rel(get(A,translate(m,i)),0) == rel(get(rel(A,1), i),1)))


        apply_clamp_0_rel(A,  m)
}

method client_apply_clamp_1(A: Ref)
 requires(Vec(A))
    requires(rel(Vec(A),0))
    requires(rel(Vec(A),1))
    requires(len(A) == 4)
{
    set(A, 0, 200)
    set(A, 1, 100)
    set(A, 2, 400)
    set(A, 3, 300)

    var m : Mapping := empty_mapping();
    m := insert(m, 0, 1);
    m := insert(m, 1, 0);
    m := insert(m, 2, 2);
    m := insert(m, 3, 3);
    assert is_bijection(m)
    assume(forall i: Int :: rel(valid_index(A, i),0) ==> ( ( rel(get(A,translate(m,i)),0) == rel(get(A, i),1)))) 

    apply_clamp_1(A,  m)
}





// testing the insert method
function mapps(m: Mapping, k: Int, v: Int): Bool {
      |keys(m)| == |values(m)| && k in keys(m) && v in values(m) && translate(m, k) == v && translate_invert(m, v) == k
}

method insert_client(m: Mapping, k: Int, v: Int)  returns(a: Mapping)
    requires is_bijection(m)
     requires !(k in keys(m))
    requires !(v in values(m))
    ensures is_bijection(a)

 {
     a  := insert(m,k,v);
     assert mapps(a, k, v)
}

